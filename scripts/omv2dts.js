"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("util");
var fs = require("fs");
var path = require("path");
var x2j = require("xml2json");
var filepath = "omv.xml";
if (process.argv.length > 2) {
    filepath = process.argv[2];
}
var outpath = process.argv[3];
if (outpath) {
    if (fs.exists(outpath) && fs.lstatSync(outpath).isDirectory()) {
        var outfilename = path.basename(filepath) + ".d.ts";
        outpath = path.join(outpath, outfilename);
    }
    else if (path.extname(outpath) !== ".ts")
        outpath += ".d.ts";
}
else
    outpath = filepath + ".d.ts";
var data;
try {
    data = readXml(filepath);
    data = data["dictionary"]["package"]["classdef"];
    fs.writeFileSync("temp.json", JSON.stringify(data, null, 2), 'utf8');
    for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
        var cd = data_1[_i];
        if (!cd.elements)
            continue;
        if (!util_1.isArray(cd.elements))
            cd.elements = [cd.elements];
        for (var _a = 0, _b = cd.elements; _a < _b.length; _a++) {
            var element = _b[_a];
            if (element.property && !util_1.isArray(element.property))
                element.property = [element.property];
            if (element.method && !util_1.isArray(element.method))
                element.method = [element.method];
            if (!element.method)
                continue;
            for (var _c = 0, _d = element.method; _c < _d.length; _c++) {
                var method = _d[_c];
                if (!method.parameters)
                    continue;
                if (method.parameters.parameter && !util_1.isArray(method.parameters.parameter)) {
                    method.parameters.parameter = [method.parameters.parameter];
                }
                if (method.name === "alert" || method.name === "confirm") {
                    var messageparam = method.parameters.parameter.find(function (p) { return p.name === "message"; });
                    if (messageparam)
                        messageparam.datatype.type = "any";
                }
                else if (method.name === "alert" || method.name === "prompt") {
                    var messageparam = method.parameters.parameter.find(function (p) { return p.name === "prompt"; });
                    if (messageparam)
                        messageparam.datatype.type = "any";
                }
            }
        }
    }
}
catch (err) {
    console.error(err);
    process.exit(0);
}
// fs.writeFileSync(`temp.json`, JSON.stringify(data, null, 2), 'utf8')
var excludes = ["Object", "Array", "Math", "Date", "Function", "String", "Number", "Boolean", "RegExp", "Error", "NaN", "Infinity", "undefined"];
var dtsString = data
    .filter(function (c) { return excludes.indexOf(c.name) === -1; })
    .map(function (c) {
    if (c.name === "global" && c.elements) {
        var string = "";
        for (var _i = 0, _a = c.elements; _i < _a.length; _i++) {
            var element = _a[_i];
            if (element.method) {
                string += element.method
                    .filter(function (m) { return excludes.indexOf(m.name) === -1; })
                    .map(function (m) { return stringifyAMethod(m, false, true); })
                    .join("\n");
            }
            if (element.property) {
                string += element.property
                    .filter(function (p) { return excludes.indexOf(p.name) === -1; })
                    .map(function (p) { return stringifyAProperty(p, false, true); })
                    .join("\n");
            }
        }
        return string;
    }
    return stringifyAClassdef(c);
}).join("\n");
fs.writeFileSync(outpath, dtsString, 'utf8');
function readXml(filepath) {
    if (!fs.existsSync(filepath)) {
        throw ("File \"" + filepath + "\" does not exists!");
    }
    if (fs.lstatSync(filepath).isDirectory()) {
        throw ("File \"" + filepath + "\" should be a file!");
    }
    var xmlstring = fs.readFileSync(filepath, 'utf8');
    var json = x2j.toJson(xmlstring);
    return JSON.parse(json);
}
function stringifyAClassdef(c) {
    var name = c.name;
    if (c.superclass)
        name += " extends " + c.superclass;
    if (!c.elements)
        return "";
    var elementsStrings = c.elements.map(function (element) {
        var isStatic = (element.type === "class");
        var string = "";
        if (element.property)
            string += element.property.map(function (p) {
                var prop = stringifyAProperty(p, isStatic);
                if (c.name === "$" && p.name === "global")
                    prop = prop.replace("global: Object", "global: any");
                return prop;
            }).join("\n") || '';
        if (element.method)
            string += element.method.map(function (m) {
                if (m.name === c.name) {
                    var params = [];
                    var paramDocs = "";
                    if (m.parameters) {
                        for (var _i = 0, _a = m.parameters.parameter; _i < _a.length; _i++) {
                            var p = _a[_i];
                            params.push(stringifyAParameter(p));
                            if (p.shortdesc)
                                paramDocs += "  * @param " + p.name + " - " + p.shortdesc + "\n";
                        }
                    }
                    var docs = "/**\n";
                    if (c.shortdesc)
                        docs += "  * " + c.shortdesc + "\n";
                    docs += paramDocs;
                    docs += " */";
                    return docs + "\nconstructor(" + params.join(", ") + ")";
                }
                return stringifyAMethod(m, isStatic);
            }).join("\n");
        return string;
    });
    var result = "declare class " + name + " {\n  " + elementsStrings.join('\n  ') + "\n}";
    return result;
}
function stringifyAProperty(p, isStatic, addDeclare) {
    if (isStatic === void 0) { isStatic = false; }
    if (addDeclare === void 0) { addDeclare = false; }
    var type = mapArrified(p.datatype, stringifyADatatype).join("|");
    var prefix = isStatic ? "static " : "";
    if (addDeclare)
        prefix = "declare var " + prefix;
    else if (p.rwaccess === "readonly")
        prefix += 'readonly ';
    var result = "" + prefix + p.name + ": " + type;
    if (p.shortdesc)
        result = "/** " + p.shortdesc + " */\n" + result;
    return result;
}
function arrify(value) {
    if (util_1.isArray(value))
        return value;
    return [value];
}
function mapArrified(value, map) {
    return arrify(value).map(map);
}
function stringifyAMethod(m, isStatic, addDeclare) {
    if (isStatic === void 0) { isStatic = false; }
    if (addDeclare === void 0) { addDeclare = false; }
    var name = isStatic ? "static " + m.name : m.name;
    if (addDeclare)
        name = "declare function " + name;
    if (name === "[]")
        return "[index:number]: " + mapArrified(m.datatype, stringifyADatatype);
    var paramsString = "";
    var paramDocs = [];
    if (m.parameters) {
        var param = m.parameters.parameter;
        var params = param;
        paramsString = (params).map(function (p) { return stringifyAParameter(p); }).join(", ");
        paramDocs = params.map(function (p) { return p.name + " - " + p.shortdesc; });
    }
    var type = m.datatype ? mapArrified(m.datatype, stringifyADatatype).join("|") : "void";
    var docs = "/**\n";
    if (m.shortdesc)
        docs += " * " + m.shortdesc + "\n";
    for (var _i = 0, paramDocs_1 = paramDocs; _i < paramDocs_1.length; _i++) {
        var pd = paramDocs_1[_i];
        docs += "* @param " + pd + "\n";
    }
    docs += "*/\n";
    var result = "" + docs + name + "(" + paramsString + "): " + type;
    return result;
}
function stringifyAParameter(p) {
    var name = p.name.replace("with", "_with").replace("default", "_default");
    var type = mapArrified(p.datatype, stringifyADatatype).join("|");
    if (p.optional || p.datatype.value)
        name += "?";
    return name + ": " + type;
}
function stringifyADatatype(d) {
    var type = '';
    if (typeof d.type === 'string')
        type = d.type;
    else
        type = d.type['$t'];
    if (!type)
        throw ("could not define type");
    switch (type) {
        case "int":
        case "uint":
            type = "number";
            break;
        case "bool":
            type = "boolean";
            break;
        case "FileArray":
        case "AliasArray":
            type = "File[]";
            break;
        case "UnitRect":
        case "UnitPoint":
            type = "UnitValue[]";
            break;
        case "Array":
            type = "any[]";
            break;
    }
    return type;
}
//# sourceMappingURL=data:application/json;base64,