[
  {
    "name": "ScriptUI",
    "dynamic": "true",
    "shortdesc": "A global class containing central information about ScriptUI. Not instantiable.",
    "elements": {
      "type": "class",
      "property": [
        {
          "name": "applicationFonts",
          "rwaccess": "readonly",
          "shortdesc": "The font constants defined by the host application.",
          "datatype": {
            "type": "Object"
          }
        },
        {
          "name": "compatibility",
          "rwaccess": "readonly",
          "shortdesc": "An object whose properties are the names of compatability modes supported by the host application.",
          "description": {
            "b": "ScriptUI.compatability.su1PanelCoordinates"
          },
          "datatype": {
            "type": "Object"
          }
        },
        {
          "name": "coreVersion",
          "rwaccess": "readonly",
          "shortdesc": "A string containing the internal version number of the ScriptUI module.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "environment",
          "rwaccess": "readonly",
          "shortdesc": "An object whose properties define attributes of the environment in which ScriptUI operates.",
          "datatype": {
            "type": {
              "href": "#/Environment",
              "$t": "Environment"
            }
          }
        },
        {
          "name": "events",
          "rwaccess": "readonly",
          "shortdesc": "An object whose properties and methods provide access to objects used in the ScriptUI event system.",
          "description": {
            "b": "createEvent()"
          },
          "datatype": {
            "type": {
              "href": "#/Events",
              "$t": "Events"
            }
          }
        },
        {
          "name": "frameworkName",
          "rwaccess": "readonly",
          "shortdesc": "A string containing the name of the UI component framework with which this version of ScriptUI is compatible.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "version",
          "rwaccess": "readonly",
          "shortdesc": "A string containing the version number of the ScriptUI component framework",
          "datatype": {
            "type": "Any"
          }
        },
        {
          "name": "Alignment",
          "rwaccess": "readonly",
          "shortdesc": {
            "i": [
              "alignment",
              "alignChildren"
            ]
          },
          "description": "Predefined alignment values are: TOP, BOTTOM, LEFT, RIGHT, FILL, CENTER",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "FontStyle",
          "rwaccess": "readonly",
          "shortdesc": {
            "a": {
              "href": "#/ScriptUI/newFont",
              "$t": "ScriptUI.newFont()"
            }
          },
          "description": "Predefined styles are REGULAR, BOLD, ITALIC, BOLDITALIC.",
          "datatype": {
            "type": "Object"
          }
        }
      ],
      "method": [
        {
          "name": "getResourceText",
          "shortdesc": "Finds and returns the resource for a given text string from the host application's resource data.",
          "description": "If no string resource matches the given text, the text itself is returned.",
          "parameters": {
            "parameter": {
              "name": "text",
              "shortdesc": "The text to match.",
              "datatype": {
                "type": "String"
              }
            }
          },
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "newImage",
          "shortdesc": "Loads a new image from resources or disk files into an image object.",
          "description": "Creates a new global image object for use in controls that can display images, loading the associated images from the specified resources or image files.",
          "parameters": {
            "parameter": [
              {
                "name": "normal",
                "shortdesc": "The resource name or the disk file path to the image used for the normal state.",
                "datatype": {
                  "type": "String"
                }
              },
              {
                "name": "disabled",
                "optional": "true",
                "shortdesc": "The resource name, or the disk file path to the image used for the disabled state.",
                "datatype": {
                  "type": "String"
                }
              },
              {
                "name": "pressed",
                "optional": "true",
                "shortdesc": "The resource name, or the file-system path to the image used for the pressed state.",
                "datatype": {
                  "type": "String"
                }
              },
              {
                "name": "rollover",
                "optional": "true",
                "shortdesc": "The resource name, or the file-system path to the image used for the rollover state.",
                "datatype": {
                  "type": "String"
                }
              }
            ]
          },
          "datatype": {
            "type": {
              "href": "#/ScriptUIImage",
              "$t": "ScriptUIImage"
            }
          }
        },
        {
          "name": "newFont",
          "shortdesc": "Creates a new font object for use in text controls and titles.",
          "parameters": {
            "parameter": [
              {
                "name": "name",
                "shortdesc": "The font name, or the font family name.",
                "datatype": {
                  "type": "String"
                }
              },
              {
                "name": "style",
                "shortdesc": {
                  "a": {
                    "href": "#/ScriptUI/class/FontStyle",
                    "$t": "ScriptUI.FontStyle"
                  }
                },
                "datatype": [
                  {
                    "type": "String"
                  },
                  {
                    "type": "Number"
                  }
                ]
              },
              {
                "name": "size",
                "shortdesc": "The font size in points.",
                "datatype": {
                  "type": "Number"
                }
              }
            ]
          },
          "datatype": {
            "type": {
              "href": "#/ScriptUIFont",
              "$t": "ScriptUIFont"
            }
          }
        }
      ]
    }
  },
  {
    "name": "Window",
    "dynamic": "true",
    "shortdesc": "The instance represents a top-level window or dialog box, which contains user-interface elements.",
    "description": {
      "a": {
        "href": "#/Window",
        "$t": "Window"
      }
    },
    "elements": [
      {
        "type": "constructor",
        "method": {
          "name": "Window",
          "shortdesc": "Creates a new window.",
          "parameters": {
            "parameter": [
              {
                "name": "type",
                "shortdesc": "The window type.",
                "description": {
                  "u": {
                    "li": [
                      {
                        "b": "window"
                      },
                      {
                        "b": "palette"
                      },
                      {
                        "b": "dialog"
                      }
                    ]
                  }
                },
                "datatype": {
                  "type": "String"
                }
              },
              {
                "name": "title",
                "optional": "true",
                "shortdesc": "The window title, a localizable string.",
                "datatype": {
                  "type": "String"
                }
              },
              {
                "name": "bounds",
                "optional": "true",
                "shortdesc": "The window's position and size.",
                "datatype": {
                  "type": {
                    "href": "#/Bounds",
                    "$t": "Bounds"
                  }
                }
              },
              {
                "name": "properties",
                "optional": "true",
                "shortdesc": "An object containing creation-only properties.",
                "description": {
                  "u": {
                    "li": [
                      {
                        "b": "resizeable"
                      },
                      {
                        "b": "su1PanelCoordinates"
                      },
                      {
                        "br": "closeButton"
                      },
                      {
                        "b": "maximizeButton"
                      },
                      {
                        "b": "minimizeButton"
                      },
                      {
                        "b": "independent"
                      },
                      {
                        "b": "borderless"
                      }
                    ]
                  }
                },
                "datatype": {
                  "type": "Object"
                }
              }
            ]
          }
        }
      },
      {
        "type": "class",
        "property": [
          {
            "name": "frameworkName",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/ScriptUI/class/frameworkName",
                "$t": "ScriptUI.frameworkName"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "version",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/ScriptUI/class/version",
                "$t": "ScriptUI.version"
              }
            },
            "datatype": {
              "type": "Any"
            }
          }
        ],
        "method": [
          {
            "name": "find",
            "shortdesc": "Use this method to find an existing window.",
            "description": {
              "a": {
                "href": "#/Window",
                "$t": "Window"
              }
            },
            "parameters": {
              "parameter": [
                {
                  "name": "type",
                  "shortdesc": "The name of a predefined resource available to JavaScript in the current application; or the window type.",
                  "description": "If a title is specified, the type is used if more than one window with that title is found. Can be null or the empty string.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "title",
                  "shortdesc": "The window title.",
                  "datatype": {
                    "type": "String"
                  }
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "alert",
            "shortdesc": "Displays a platform-standard dialog containing a short message and an OK button.",
            "parameters": {
              "parameter": [
                {
                  "name": "message",
                  "shortdesc": "TThe string for the displayed message.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "title",
                  "optional": "true",
                  "shortdesc": "A string to appear as the title of the dialog, if the platform supports a title.",
                  "description": "Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is \"Script Alert\".",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "errorIcon",
                  "shortdesc": "When true, the platform-standard alert icon is replaced by the platform-standard error icon in the dialog.",
                  "description": "Ignored in Mac OS, which does not support icons for alert dialogs.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            }
          },
          {
            "name": "confirm",
            "shortdesc": "Displays a platform-standard dialog containing a short message and two buttons labeled Yes and No.",
            "description": "Returns true if the user clicked Yes, false if the user clicked No.",
            "parameters": {
              "parameter": [
                {
                  "name": "message",
                  "shortdesc": "The string for the displayed message.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "noAsDefault",
                  "shortdesc": "When true, the No button is the default choice, selected when the user types Enter.",
                  "description": "Default is false, meaning that Yes is the default choice.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                },
                {
                  "name": "title",
                  "optional": "true",
                  "shortdesc": "A string to appear as the title of the dialog, if the platform supports a title.",
                  "description": "Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is \"Script Alert\".",
                  "datatype": {
                    "type": "String"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "prompt",
            "shortdesc": "Displays a modal dialog that returns the user’s text input.",
            "description": "Returns the value of the text edit field if the user clicked OK, null if the user clicked Cancel.",
            "parameters": {
              "parameter": [
                {
                  "name": "prompt",
                  "shortdesc": "The string for the displayed message.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "default",
                  "optional": "true",
                  "shortdesc": "The initial value to be displayed in the text edit field.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "title",
                  "optional": "true",
                  "shortdesc": "A string to appear as the title of the dialog.",
                  "description": "In Windows, this appears in the window’s frame; in Mac OS it appears above the message. The default title string is \"Script Prompt\".",
                  "datatype": {
                    "type": "String"
                  }
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          }
        ]
      },
      {
        "type": "instance",
        "property": [
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "i": "onDraw"
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "When true, the element is shown, when false it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The bounds of the window's drawable area, excluding the frame, in screen coordinates.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "frameBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of the window frame in screen coordinates.",
            "description": "The frame consists of the title bar and borders that enclose the content region of a window, depending on the windowing system.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "frameLocation",
            "shortdesc": "The top left corner of the window frame in screen coordinates.",
            "description": {
              "a": {
                "href": "#/Window/frameBounds",
                "$t": "frameBounds"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "frameSize",
            "rwaccess": "readonly",
            "shortdesc": "The size and location of the window's frame in screen coordinates.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of the window's drawable area.",
            "description": "The same as [bounds.x, bounds.y].",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The largest rectangle to which the window can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The smallest rectangle to which the window can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size of the window.",
            "description": "Used in automatic layout and resizing. To set a specific value for only one dimension, specify the other dimension as -1.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current size and location of the content area of the window in screen coordinates.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this window relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "characters",
            "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the window.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "justify",
            "shortdesc": "The default text justification style for child text elements.",
            "description": {
              "b": [
                "left",
                "center",
                "right"
              ]
            },
            "datatype": {
              "type": "String",
              "value": "left"
            }
          },
          {
            "name": "text",
            "shortdesc": "The title, label, or displayed text, a localizeable string.",
            "description": "Does not apply to containers of type group.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "active",
            "shortdesc": "Set to true to make this window active.",
            "description": {
              "li": [
                "A modal dialog that is visible is by definition the active dialog.",
                "An active palette is the front-most window.",
                {
                  "a": {
                    "href": "#/Button",
                    "$t": "Button"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "shortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/Window/event/onShortcutKey",
                "$t": "onShortcutKey()"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "cancelElement",
            "shortdesc": {
              "i": "dialog"
            },
            "description": "The cancellation key is the Esc key. By default, looks for a button whose name or text is \"cancel\" (case disregarded).",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "defaultElement",
            "shortdesc": {
              "b": "dialog"
            },
            "description": "By default, looks for a button whose name or text is \"ok\" (case disregarded).",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "maximized",
            "shortdesc": "True if the window is expanded.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "minimized",
            "shortdesc": "True if the window is minimized or iconified.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "alignChildren",
            "shortdesc": "Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.",
            "description": {
              "b": [
                "alignment",
                "alignChildren",
                "alignment"
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "The collection of UI elements that have been added to this container.",
            "description": "An array indexed by number or by a string containing an element's name. The length property of this array is the number of child elements for container elements, and is zero for controls.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "layout",
            "shortdesc": "The layout manager for this container.",
            "description": {
              "a": [
                {
                  "href": "#LayoutManager/layout",
                  "$t": "layout()"
                },
                {
                  "href": "#LayoutManager",
                  "$t": "LayoutManager"
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/LayoutManager",
                "$t": "LayoutManager"
              }
            }
          },
          {
            "name": "margins",
            "shortdesc": "The number of pixels between the edges of a container and the outermost child elements.",
            "description": "You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.",
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "orientation",
            "shortdesc": "The layout orientation of children in a container.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "b": [
                "row",
                "column",
                "stack",
                "alignChildren",
                "alignment"
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "spacing",
            "shortdesc": "The number of pixels separating one child element from its adjacent sibling element.",
            "description": "Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.",
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
            "description": {
              "li": [
                "resizeable: When true, the window can be resized by the user. Default is false.",
                "su1PanelCoordinates: Photoshop only. When true, the child panels of this window automatically adjust the positions of their children for compatability with Photoshop CS (in which the vertical coordinate was measured from outside the frame). Default is false. Individual panels can override the parent window’s setting.",
                "closeButton: Bridge only. When true, the title bar includes a button to close the window, if the platform and window type allow it. When false, it does not. Default is true. Not used for dialogs.",
                "maximizeButton: Bridge only. When true, the title bar includes a button to expand the window to its maximum size (typically, the entire screen), if the platform and window type allow it. When false, it does not. Default is false for type palette, true for type window. Not used for dialogs."
              ]
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The immediate parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type; \"dialog\", \"palette\", or \"window\".",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "opacity",
            "shortdesc": "The opacity of the window, in the range [0..1].",
            "description": "A value of 1.0 (the default) makes the window completely opaque, a value of 0 makes it completely transparent. Intermediate values make it partially transparent to any degree.",
            "datatype": {
              "type": "Number",
              "value": "1.0"
            }
          }
        ],
        "method": [
          {
            "name": "show",
            "shortdesc": "Makes this window visible.",
            "description": {
              "a": {
                "href": "#/Window/event/onShow",
                "$t": "onShow()"
              },
              "li": "For a modal dialog, opens the dialog and does not return until the dialog is dismissed. If it is dismissed via the close() method, this method returns any result value passed to that method. Otherwise, returns 0."
            }
          },
          {
            "name": "hide",
            "shortdesc": "Hides this windows.",
            "description": {
              "li": "For a modal dialog, closes the dialog and sets its result to 0."
            }
          },
          {
            "name": "notify",
            "shortdesc": "Sends a notification message to all listeners, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The event name; if omitted, the default event is sent.",
                "description": {
                  "b": [
                    "onClose",
                    "onMove",
                    "onMoving",
                    "onResize",
                    "onResizing",
                    "onShow"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "center",
            "shortdesc": "Centers this window on screen or with repect to another window.",
            "parameters": {
              "parameter": {
                "name": "window",
                "optional": "true",
                "shortdesc": "The relative window. If not specified, centers on the screen.",
                "datatype": {
                  "type": {
                    "href": "#/Window",
                    "$t": "Window"
                  }
                }
              }
            }
          },
          {
            "name": "close",
            "shortdesc": "Closes this window.",
            "description": {
              "a": {
                "href": "#/Window/event/onClose",
                "$t": "onClose()"
              }
            },
            "parameters": {
              "parameter": {
                "name": "return",
                "optional": "true",
                "shortdesc": "A number to be returned from the show() method that invoked this window as a modal dialog.",
                "datatype": {
                  "type": "Any"
                }
              }
            }
          },
          {
            "name": "add",
            "shortdesc": "Creates and returns a new control or container object and adds it to the children of this window.",
            "parameters": {
              "parameter": [
                {
                  "name": "type",
                  "shortdesc": {
                    "i": "type"
                  },
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "bounds",
                  "optional": "true",
                  "shortdesc": "A bounds specification that describes the size and position of the new control or container, relative to its parent.",
                  "description": {
                    "a": {
                      "href": "#/Bounds",
                      "$t": "Bounds"
                    },
                    "b": "bounds"
                  },
                  "datatype": {
                    "type": {
                      "href": "#/Bounds",
                      "$t": "Bounds"
                    }
                  }
                },
                {
                  "name": "text",
                  "optional": "true",
                  "shortdesc": "The text or label, a localizable string.",
                  "description": {
                    "b": "text"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "properties",
                  "optional": "true",
                  "shortdesc": "An object that contains one or more creation properties of the new child (properties used only when the element is created).",
                  "description": {
                    "br": "properties"
                  },
                  "datatype": {
                    "type": "Object"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "remove",
            "shortdesc": {
              "b": "children"
            },
            "description": "No error results if the child does not exist.",
            "parameters": {
              "parameter": {
                "name": "what",
                "shortdesc": {
                  "b": "text"
                },
                "datatype": {
                  "type": "Any"
                }
              }
            }
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this window.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": "Predefined event names are: change, changing, move, moving, resize, resizing, show , enterKey, focus, blur, keydown, keyup, mousedown, mouseup, mousemove, mouseover, mouseout, click (detail = 1 for single, 2 for double).",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "optional": "true",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this window.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": [
          {
            "name": "onActivate",
            "shortdesc": "An event-handler callback function, called when the window acquires the keyboard focus.",
            "description": "Called when the user gives the window the keyboard focus by clicking it or otherwise making it the active window."
          },
          {
            "name": "onDeactivate",
            "shortdesc": "An event-handler callback function, called when the window loses the keyboard focus.",
            "description": "Called when the user moves the keyboard focus from the previously active window to another window."
          },
          {
            "name": "onClose",
            "shortdesc": "An event-handler callback function, called  when the window is about to be closed.",
            "description": {
              "a": {
                "href": "#/Window/close",
                "$t": "close()"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "onMove",
            "shortdesc": "An event-handler callback function, called  when the window  has been moved"
          },
          {
            "name": "onMoving",
            "shortdesc": "An event-handler callback function, called  when the window is being moved",
            "description": "Called while a window in being moved, each time the position changes. A handler can monitor the move operation."
          },
          {
            "name": "onResize",
            "shortdesc": "An event-handler callback function, called after the window has been resized"
          },
          {
            "name": "onResizing",
            "shortdesc": "An event-handler callback function, called while a window is being resized",
            "description": "Called while a window is being resized, each time the height or width changes. A handler can monitor the resize operation."
          },
          {
            "name": "onShortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/Window/shortcutKey",
                "$t": "shortcutKey"
              }
            }
          },
          {
            "name": "onShow",
            "shortdesc": "An event-handler callback function, called just before the window is displayed",
            "description": {
              "a": {
                "href": "#/Window/show",
                "$t": "show()"
              }
            }
          }
        ]
      }
    ]
  },
  {
    "name": "LayoutManager",
    "dynamic": "true",
    "shortdesc": "Controls the automatic layout behavior for a window or container.",
    "description": "The subclass AutoLayoutManager implements the default automatic layout behavior.",
    "elements": {
      "type": "instance",
      "method": [
        {
          "name": "layout",
          "shortdesc": "Invokes the automatic layout behavior for the managed container.",
          "description": "Adjusts sizes and positions of the child elements of this window or container according to the placement and alignment property values in the parent and children.\n            Invoked automatically the first time the window is displayed. Thereafter, the script must invoke it explicitly to change the layout in case of changes in the size or position of the parent or children."
        },
        {
          "name": "resize",
          "shortdesc": "Performs a layout after a Window is resized, based on the new size.",
          "description": "Resizes the child elements of the managed container with a given alignment type, after the window has been resized by the user."
        }
      ]
    }
  },
  {
    "name": "ScriptUIPen",
    "dynamic": "true",
    "shortdesc": "A drawing pen that defines a color and line width used to stroke paths.",
    "description": {
      "a": [
        {
          "href": "#/ScriptUIGraphics/newPen",
          "$t": "ScriptUIGraphics.newPen()"
        },
        {
          "href": "#/ScriptUIGraphics/foregroundColor",
          "$t": "foregroundColor"
        },
        {
          "href": "#/ScriptUIGraphics/drawString",
          "$t": "drawString()"
        },
        {
          "href": "#/ScriptUIGraphics/strokePath",
          "$t": "strokePath()"
        }
      ],
      "b": {}
    },
    "elements": {
      "type": "instance",
      "property": [
        {
          "name": "color",
          "rwaccess": "readonly",
          "shortdesc": "The pen color.",
          "description": {
            "b": [
              {},
              {}
            ]
          },
          "datatype": {
            "type": "Number",
            "array": {
              "size": "4"
            }
          }
        },
        {
          "name": "theme",
          "rwaccess": "readonly",
          "shortdesc": "The theme name.",
          "description": "The name of a color theme to use for drawing when the type is THEME_COLOR. Theme colors are defined by the host application.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "type",
          "rwaccess": "readonly",
          "shortdesc": "The pen type, solid or theme.",
          "description": "One of these constants: ScriptUIGraphics.PenType.SOLID_COLOR or ScriptUIGraphics.PenType.THEME_COLOR",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "lineWidth",
          "shortdesc": "The pixel width of the drawing line.",
          "datatype": {
            "type": "Number",
            "min": "1"
          }
        }
      ]
    }
  },
  {
    "name": "ScriptUIBrush",
    "dynamic": "true",
    "shortdesc": "A painting brush that encapsulates a color or pattern used to fill paths.",
    "description": {
      "a": [
        {
          "href": "#/ScriptUIGraphics/newBrush",
          "$t": "ScriptUIGraphics.newBrush()"
        },
        {
          "href": "#/ScriptUIGraphics/backgroundColor",
          "$t": "backgroundColor"
        },
        {
          "href": "#/ScriptUIGraphics/fillPath",
          "$t": "fillPath()"
        }
      ],
      "b": {}
    },
    "elements": {
      "type": "instance",
      "property": [
        {
          "name": "color",
          "rwaccess": "readonly",
          "shortdesc": "The brush color.",
          "description": {
            "b": [
              {},
              {}
            ]
          },
          "datatype": {
            "type": "Number",
            "array": {
              "size": "4"
            }
          }
        },
        {
          "name": "theme",
          "rwaccess": "readonly",
          "shortdesc": "The theme name.",
          "description": "The name of a color theme to use for drawing when the type is THEME_COLOR. Theme colors are defined by the host application.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "type",
          "rwaccess": "readonly",
          "shortdesc": "The brush type, solid or theme.",
          "description": "One of these constants: ScriptUIGraphics.BrushType.SOLID_COLOR or ScriptUIGraphics.BrushType.THEME_COLOR",
          "datatype": {
            "type": "Number"
          }
        }
      ]
    }
  },
  {
    "name": "ScriptUIPath",
    "dynamic": "true",
    "shortdesc": "A helper object that encapsulates a drawing path for a figure to be drawn into a window or control.",
    "description": {
      "a": [
        {
          "href": "#/ScriptUIGraphics/newPath",
          "$t": "newPath()"
        },
        {
          "href": "#/ScriptUIGraphics/moveto",
          "$t": "moveto()"
        },
        {
          "href": "#/ScriptUIGraphics/lineto",
          "$t": "lineto()"
        },
        {
          "href": "#/ScriptUIGraphics/rectPath",
          "$t": "rectPath()"
        },
        {
          "href": "#/ScriptUIGraphics/ellipsePath",
          "$t": "ellipsePath()"
        },
        {
          "href": "#/ScriptUIGraphics/currentPath",
          "$t": "currentPath"
        },
        {
          "href": "#/ScriptUIGraphics/closePath",
          "$t": "closePath()"
        },
        {
          "href": "#/ScriptUIGraphics/fillPath",
          "$t": "fillPath()"
        },
        {
          "href": "#/ScriptUIGraphics/strokePath",
          "$t": "strokePath()"
        }
      ],
      "b": [
        {},
        {}
      ]
    }
  },
  {
    "name": "ScriptUIGraphics",
    "dynamic": "true",
    "shortdesc": {
      "i": "graphics"
    },
    "description": {
      "i": "onDraw",
      "b": {}
    },
    "elements": [
      {
        "type": "class",
        "property": [
          {
            "name": "BrushType",
            "rwaccess": "readonly",
            "shortdesc": {
              "i": "type",
              "a": {
                "href": "#/ScriptUIGraphics/newBrush",
                "$t": "newBrush()"
              }
            },
            "description": "Type constants are: SOLID_COLOR, THEME_COLOR.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "PenType",
            "rwaccess": "readonly",
            "shortdesc": {
              "i": "type",
              "a": {
                "href": "#/ScriptUIGraphics/newPen",
                "$t": "newPen()"
              }
            },
            "description": "Type constants are: SOLID_COLOR, THEME_COLOR.",
            "datatype": {
              "type": "Object"
            }
          }
        ]
      },
      {
        "type": "instance",
        "property": [
          {
            "name": "backgroundColor",
            "shortdesc": "The background color for containers; for non-containers, the parent background color.",
            "description": "The paint color and style is defined in this brush object.This property is only supported for controls like  dropdownlist, edittext, and listbox.",
            "datatype": {
              "type": {
                "href": "#/ScriptUIBrush",
                "$t": "ScriptUIBrush"
              }
            }
          },
          {
            "name": "disabledBackgroundColor",
            "shortdesc": "The background color for containers when disabled or inactive; for non-containers, the parent background color.",
            "description": "The paint color and style is defined in this brush object.This property is only supported for controls like  dropdownlist, edittext, and listbox.",
            "datatype": {
              "type": {
                "href": "#/ScriptUIBrush",
                "$t": "ScriptUIBrush"
              }
            }
          },
          {
            "name": "disabledForegroundColor",
            "shortdesc": "The text color when the element is disabled or inactive.",
            "description": "The paint color and style is defined in this pen object.",
            "datatype": {
              "type": {
                "href": "#/ScriptUIPen",
                "$t": "ScriptUIPen"
              }
            }
          },
          {
            "name": "font",
            "shortdesc": "The default font to use for displaying text.",
            "datatype": {
              "type": {
                "href": "#/ScriptUIFont",
                "$t": "ScriptUIFont"
              }
            }
          },
          {
            "name": "foregroundColor",
            "shortdesc": "The text color.",
            "description": "The paint color and style is defined in this pen object.",
            "datatype": {
              "type": {
                "href": "#/ScriptUIPen",
                "$t": "ScriptUIPen"
              }
            }
          },
          {
            "name": "currentPath",
            "rwaccess": "readonly",
            "shortdesc": "The current drawing path, encapsulated in a path object.",
            "datatype": {
              "type": {
                "href": "#/ScriptUIPath",
                "$t": "ScriptUIPath"
              }
            }
          },
          {
            "name": "currentPoint",
            "rwaccess": "readonly",
            "shortdesc": "The current position in the current drawing path.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          }
        ],
        "method": [
          {
            "name": "newBrush",
            "shortdesc": "Creates a new painting brush object.",
            "parameters": {
              "parameter": [
                {
                  "name": "type",
                  "shortdesc": "The brush type, solid or theme.",
                  "description": {
                    "i": [
                      "ScriptUIGraphics.BrushType.SOLID_COLOR",
                      "ScriptUIGraphics.BrushType.THEME_COLOR"
                    ]
                  },
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "color",
                  "shortdesc": "The brush color.",
                  "description": {
                    "li": [
                      "If type is SOLID_COLOR, the color expressed as an array of three or four values, in the form [R, B, G, A] specifying the red, green, and blue values of the color and, optionally, the opacity (alpha channel). All values are numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.",
                      "If the type is THEME_COLOR, the name string of the theme. Theme colors are defined by the host application."
                    ]
                  },
                  "datatype": [
                    {
                      "type": "Number",
                      "array": {
                        "size": "4"
                      }
                    },
                    {
                      "type": "String"
                    }
                  ]
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIBrush",
                "$t": "ScriptUIBrush"
              }
            }
          },
          {
            "name": "newPen",
            "shortdesc": "Creates a new drawing pen object.",
            "parameters": {
              "parameter": [
                {
                  "name": "type",
                  "shortdesc": "The pen type, solid or theme.",
                  "description": {
                    "i": [
                      "ScriptUIGraphics.PenType.SOLID_COLOR",
                      "ScriptUIGraphics.PenType.THEME_COLOR"
                    ]
                  },
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "color",
                  "shortdesc": "The pen color.",
                  "description": {
                    "li": [
                      "If type is SOLID_COLOR, the color expressed as an array of three or four values, in the form [R, B, G, A] specifying the red, green, and blue values of the color and, optionally, the opacity (alpha channel). All values are numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.",
                      "If the type is THEME_COLOR, the name string of the theme. Theme colors are defined by the host application."
                    ]
                  },
                  "datatype": [
                    {
                      "type": "Number",
                      "array": {
                        "size": "4"
                      }
                    },
                    {
                      "type": "String"
                    }
                  ]
                },
                {
                  "name": "width",
                  "shortdesc": "The width of the pen line in pixels.",
                  "description": "The line is centered around the current point. For example, if the value is 2, drawing a line from (0, 10) to (5, 10) paints the two rows of pixels directly above and below y-position 10.",
                  "datatype": {
                    "type": "Number"
                  }
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIPen",
                "$t": "ScriptUIPen"
              }
            }
          },
          {
            "name": "newPath",
            "shortdesc": "Creates a new, empty path object.",
            "description": {
              "a": {
                "href": "#/SciptUIGraphics/currentPath",
                "$t": "currentPath"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIPath",
                "$t": "ScriptUIPath"
              }
            }
          },
          {
            "name": "closePath",
            "shortdesc": "Closes the current path.",
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics/currentPoint",
                  "$t": "currentPoint"
                },
                {
                  "href": "#/ScriptUIGraphics/currentPath",
                  "$t": "currentPath"
                }
              ]
            }
          },
          {
            "name": "moveTo",
            "shortdesc": {
              "a": {
                "href": "#/ScriptUIGraphics/currentPath",
                "$t": "currentPath"
              }
            },
            "description": {
              "a": [
                {
                  "href": "#/Point",
                  "$t": "Point"
                },
                {
                  "href": "#/ScriptUIGraphics/currentPoint",
                  "$t": "currentPoint"
                }
              ]
            },
            "parameters": {
              "parameter": [
                {
                  "name": "x",
                  "shortdesc": "The X coordinate for the new point, relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "y",
                  "shortdesc": "The Y coordinate for the new point, relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "lineTo",
            "shortdesc": {
              "a": {
                "href": "#/ScriptUIGraphics/currentPath",
                "$t": "currentPath"
              }
            },
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics/currentPoint",
                  "$t": "currentPoint"
                },
                {
                  "href": "#/Point",
                  "$t": "Point"
                },
                {
                  "href": "#/ScriptUIGraphics/currentPoint",
                  "$t": "currentPoint"
                }
              ]
            },
            "parameters": {
              "parameter": [
                {
                  "name": "x",
                  "shortdesc": "The X coordinate for the destination point, relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "y",
                  "shortdesc": "The Y coordinate for the destination point, relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "rectPath",
            "shortdesc": {
              "a": {
                "href": "#/ScriptUIGraphics/currentPath",
                "$t": "currentPath"
              }
            },
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics/fillPath",
                  "$t": "fillPath()"
                },
                {
                  "href": "#/ScriptUIGraphics/strokePath",
                  "$t": "strokePath()"
                },
                {
                  "href": "#/Point",
                  "$t": "Point"
                },
                {
                  "href": "#/ScriptUIGraphics/currentPoint",
                  "$t": "currentPoint"
                }
              ],
              "br": {}
            },
            "parameters": {
              "parameter": [
                {
                  "name": "left",
                  "shortdesc": "The left coordinate relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "top",
                  "shortdesc": "The top coordinate relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "width",
                  "shortdesc": "The width in pixels.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "height",
                  "shortdesc": "The height in pixels.",
                  "datatype": {
                    "type": "Number"
                  }
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "ellipsePath",
            "shortdesc": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics/currentPath",
                  "$t": "currentPath"
                },
                {
                  "href": "#/ScriptUIGraphics/fillPath",
                  "$t": "fillPath()"
                },
                {
                  "href": "#/ScriptUIGraphics/strokePath",
                  "$t": "strokePath()"
                }
              ]
            },
            "description": {
              "a": [
                {
                  "href": "#/Point",
                  "$t": "Point"
                },
                {
                  "href": "#/ScriptUIGraphics/currentPoint",
                  "$t": "currentPoint"
                }
              ]
            },
            "parameters": {
              "parameter": [
                {
                  "name": "left",
                  "shortdesc": "The left coordinate of the region, relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "top",
                  "shortdesc": "The top coordinate of the region, relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "width",
                  "shortdesc": "The width of the region in pixels.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "height",
                  "shortdesc": "The height of the region in pixels.",
                  "datatype": {
                    "type": "Number"
                  }
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "strokePath",
            "shortdesc": "Strokes the path segments of a path with a given drawing pen.",
            "parameters": {
              "parameter": [
                {
                  "name": "pen",
                  "shortdesc": "The drawing pen that defines the color and line width.",
                  "datatype": {
                    "type": {
                      "href": "#/ScriptUIPen",
                      "$t": "ScriptUIPen"
                    }
                  }
                },
                {
                  "name": "path",
                  "optional": "true",
                  "shortdesc": {
                    "a": {
                      "href": "#/ScriptUIGraphics/currentPath",
                      "$t": "currentPath"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "#/ScriptUIPath",
                      "$t": "ScriptUIPath"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "fillPath",
            "shortdesc": "Fills a path using a given painting brush.",
            "parameters": {
              "parameter": [
                {
                  "name": "brush",
                  "shortdesc": "The brush object that defines the fill color.",
                  "datatype": {
                    "type": {
                      "href": "#/ScriptUIBrush",
                      "$t": "ScriptUIBrush"
                    }
                  }
                },
                {
                  "name": "path",
                  "optional": "true",
                  "shortdesc": {
                    "a": {
                      "href": "#/ScriptUIGraphics/currentPath",
                      "$t": "currentPath"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "#/ScriptUIPath",
                      "$t": "ScriptUIPath"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "drawFocusRing",
            "shortdesc": "Draws a focus ring within a region of this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "left",
                  "shortdesc": "The left coordinate of the region.",
                  "description": "Value is relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "top",
                  "shortdesc": "The top coordinate of the region.",
                  "description": "Value is relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "width",
                  "shortdesc": "The width of the region in pixels.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "height",
                  "shortdesc": "The height of the region in pixels.",
                  "datatype": {
                    "type": "Number"
                  }
                }
              ]
            }
          },
          {
            "name": "drawImage",
            "shortdesc": "Draws an image within a given region of the element.",
            "description": "Uses the version of the image that is appropriate to the element's current state.",
            "parameters": {
              "parameter": [
                {
                  "name": "image",
                  "shortdesc": "The image to draw.",
                  "description": "This object contains different versions of an image appropriate to various element states, such as a dimmed version for the disabled state.",
                  "datatype": {
                    "type": {
                      "href": "#/ScriptUIImage",
                      "$t": "ScriptUIImage"
                    }
                  }
                },
                {
                  "name": "left",
                  "shortdesc": "The left coordinate of the region, relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "top",
                  "shortdesc": "The top coordinate of the region, relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "width",
                  "optional": "true",
                  "shortdesc": "The width in pixels. If provided, the image is stretched or shrunk to fit. If omitted, uses the original image width.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "height",
                  "optional": "true",
                  "shortdesc": "The height in pixels. If provided, the image is stretched or shrunk to fit. If omitted, uses the original image height.",
                  "datatype": {
                    "type": "Number"
                  }
                }
              ]
            }
          },
          {
            "name": "drawOSControl",
            "shortdesc": "Draw the platform-specific control associated with this element."
          },
          {
            "name": "drawString",
            "shortdesc": "Draw a string of text starting at a given point in this element, using a given drawing pen and font.",
            "parameters": {
              "parameter": [
                {
                  "name": "text",
                  "shortdesc": "The text string.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "pen",
                  "shortdesc": "The drawing pen to use.",
                  "datatype": {
                    "type": {
                      "href": "#/ScriptUIPen",
                      "$t": "ScriptUIPen"
                    }
                  }
                },
                {
                  "name": "x",
                  "shortdesc": "The left coordinate, relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "y",
                  "shortdesc": "The top coordinate, relative to the origin of this element.",
                  "datatype": {
                    "type": "Number"
                  }
                },
                {
                  "name": "font",
                  "optional": "true",
                  "shortdesc": {
                    "a": {
                      "href": "#/ScriptUIGraphics/font",
                      "$t": "font"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "#/ScriptUIFont",
                      "$t": "ScriptUIFont"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "measureString",
            "shortdesc": "Calculates the size needed to display a string using the given font.",
            "description": {
              "a": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            },
            "parameters": {
              "parameter": [
                {
                  "name": "text",
                  "shortdesc": "The text string to measure.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "font",
                  "optional": "true",
                  "shortdesc": {
                    "a": {
                      "href": "#/ScriptUIGraphics/font",
                      "$t": "font"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "#/ScriptUIFont",
                      "$t": "ScriptUIFont"
                    }
                  }
                },
                {
                  "name": "boundingWidth",
                  "optional": "true",
                  "shortdesc": "The bounding width.",
                  "datatype": {
                    "type": "Number"
                  }
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          }
        ]
      }
    ]
  },
  {
    "name": "DrawState",
    "dynamic": "true",
    "shortdesc": {
      "a": {
        "href": "#/ScriptUIGraphics/event/onDraw",
        "$t": "ScriptUIGraphics.onDraw()"
      }
    },
    "description": {
      "a": {
        "href": "#/ScriptUIGraphics/event/onDraw",
        "$t": "ScriptUIGraphics.onDraw()"
      }
    },
    "elements": {
      "type": "instance",
      "property": [
        {
          "name": "mouseOver",
          "rwaccess": "readonly",
          "shortdesc": "True if the cursor is hovering over this element.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "leftButtonPressed",
          "rwaccess": "readonly",
          "shortdesc": "True if the left mouse button is being pressed.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "middleButtonPressed",
          "rwaccess": "readonly",
          "shortdesc": "True if the middle mouse button is being pressed.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "rightButtonPressed",
          "rwaccess": "readonly",
          "shortdesc": "True if the right mouse button is being pressed.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "hasFocus",
          "rwaccess": "readonly",
          "shortdesc": "True if the element has the input focus.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "shiftKeyPressed",
          "rwaccess": "readonly",
          "shortdesc": "True if the Shift key is being pressed.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "ctrlKeyPressed",
          "rwaccess": "readonly",
          "shortdesc": "True if the Ctrl key is being pressed.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "cmdKeyPressed",
          "rwaccess": "readonly",
          "shortdesc": "True if the Command key is being pressed (in Mac OS only).",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "optKeyPressed",
          "rwaccess": "readonly",
          "shortdesc": "True if the Option key is being pressed (in Mac OS only).",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "altKeyPressed",
          "rwaccess": "readonly",
          "shortdesc": "True if the Alt key is being pressed (in Windows only).",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "numLockKeyPressed",
          "rwaccess": "readonly",
          "shortdesc": "True if the Num Lock key is being pressed.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "capsLockKeyPressed",
          "rwaccess": "readonly",
          "shortdesc": "True if the Caps Lock key is being pressed.",
          "datatype": {
            "type": "Boolean"
          }
        }
      ]
    }
  },
  {
    "name": "ScriptUIFont",
    "dynamic": "true",
    "shortdesc": "Encapsulates the qualities of a font used to draw text into a control.",
    "description": {
      "a": [
        {
          "href": "#/ScriptUIGraphics/newFont",
          "$t": "newFont()"
        },
        {
          "href": "#/ScriptUIGraphics/font",
          "$t": "font"
        },
        {
          "href": "#/ScriptUIGraphics/drawString",
          "$t": "drawString()"
        },
        {
          "href": "#/ScriptUIGraphics/measureString",
          "$t": "measureString()"
        }
      ]
    },
    "elements": {
      "type": "instance",
      "property": [
        {
          "name": "family",
          "rwaccess": "readonly",
          "shortdesc": "The font family name.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "name",
          "rwaccess": "readonly",
          "shortdesc": "The complete font name, consisting of the family and style, if specified.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "size",
          "rwaccess": "readonly",
          "shortdesc": "The font point size.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "style",
          "rwaccess": "readonly",
          "shortdesc": {
            "a": {
              "href": "#/ScriptUIGraphics/FontStyle",
              "$t": "ScriptUIGraphics.FontStyle"
            }
          },
          "datatype": {
            "type": "Object"
          }
        },
        {
          "name": "substitute",
          "rwaccess": "readonly",
          "shortdesc": "The name of a substitution font, a fallback font to substitute for this font if the requested font family or style is not available.",
          "datatype": {
            "type": "String"
          }
        }
      ]
    }
  },
  {
    "name": "ScriptUIImage",
    "dynamic": "true",
    "shortdesc": "Encapsulates a set of images that can be drawn into a control.",
    "description": {
      "a": [
        {
          "href": "#/ScriptUI/class/newImage",
          "$t": "newImage()"
        },
        {
          "href": "#/ScriptUIGraphics/drawImage",
          "$t": "drawImage()"
        }
      ]
    },
    "elements": {
      "type": "instance",
      "property": [
        {
          "name": "format",
          "rwaccess": "readonly",
          "shortdesc": "The image format. One of: resource, JPEG, GIF, TIFF, PNG, or PICT (Macintosh).",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "name",
          "rwaccess": "readonly",
          "shortdesc": "The image name. Either the file name, or the resource name.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "pathname",
          "rwaccess": "readonly",
          "shortdesc": "The full path to the file that contains the image.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "size",
          "rwaccess": "readonly",
          "shortdesc": "The image size in pixels.",
          "datatype": {
            "type": {
              "href": "#/Dimension",
              "$t": "Dimension"
            }
          }
        }
      ]
    }
  },
  {
    "name": "StaticText",
    "dynamic": "true",
    "shortdesc": "A text label that the user cannot change.",
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "characters",
            "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the element.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "justify",
            "shortdesc": "The text justification style.",
            "description": {
              "b": [
                "left",
                "center",
                "right"
              ]
            },
            "datatype": {
              "type": "String",
              "value": "left"
            }
          },
          {
            "name": "text",
            "shortdesc": "The text to display, a localizable string.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "active",
            "shortdesc": "Always false. This element cannot have input focus.",
            "description": {
              "a": {
                "href": "#/Button",
                "$t": "Button"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "shortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/StaticText/event/onShortcutKey",
                "$t": "onShortcutKey()"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/StaticText/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "i": "preferredSize"
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
            "description": {
              "li": [
                "multiline: When false (the default), the control displays a single line of text. When true, the control displays multiple lines, in which case the text wraps within the width of the control.",
                "scrolling: When false (the default), the displayed text cannot be scrolled. When true, the displayed text can be vertically scrolled using the Up Arrow and Down Arrow; this case implies multiline=true."
              ]
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type, \"statictext\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "notify",
            "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The name of the control event handler to call.",
                "description": {
                  "b": [
                    "onClick",
                    "onChange",
                    "onChanging",
                    "onChange",
                    "onClick"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": [
          {
            "name": "onDraw",
            "shortdesc": "An event-handler callback function, called when the window is about to be drawn.",
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics",
                  "$t": "ScriptUIGraphics"
                },
                {
                  "href": "#/DrawState",
                  "$t": "DrawState"
                }
              ]
            }
          },
          {
            "name": "onShortcutKey",
            "shortdesc": {
              "b": "shortcutKey"
            },
            "description": "In Windows only."
          }
        ]
      }
    ]
  },
  {
    "name": "Button",
    "dynamic": "true",
    "shortdesc": "A pushbutton element containing a mouse-sensitive text string.",
    "description": {
      "a": [
        {
          "href": "#/Button/event/onClick",
          "$t": "onClick()"
        },
        {
          "href": "#/Button/notify",
          "$t": "notify()"
        }
      ]
    },
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "characters",
            "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the element.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "justify",
            "shortdesc": "The text justification style.",
            "description": {
              "b": [
                "left",
                "center",
                "right"
              ]
            },
            "datatype": {
              "type": "String",
              "value": "left"
            }
          },
          {
            "name": "text",
            "shortdesc": "The text to display, a localizable string.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "active",
            "shortdesc": "True if this element is active.",
            "description": {
              "a": {
                "href": "#/Button",
                "$t": "Button"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "shortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/Button/event/onShortcutKey",
                "$t": "onShortcutKey()"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/Button/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "i": "preferredSize"
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
            "description": "A Button object has no creation properties, but the third argument to the add() method that creates it can be the initial text value.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help string that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type; \"button\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "notify",
            "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The name of the control event handler to call.",
                "description": {
                  "b": [
                    "onClick",
                    "onChange",
                    "onChanging",
                    "onChange",
                    "onClick"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": [
          {
            "name": "onActivate",
            "shortdesc": "An event-handler callback function, called when the element acquires the keyboard focus.",
            "description": "Called when the user gives the control the keyboard focus by clicking it or tabbing into it."
          },
          {
            "name": "onDeactivate",
            "shortdesc": "An event-handler callback function, called when the element loses the keyboard focus.",
            "description": "Called when the user moves the keyboard focus from the previously active control to another control."
          },
          {
            "name": "onDraw",
            "shortdesc": "An event-handler callback function, called when the window is about to be drawn.",
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics",
                  "$t": "ScriptUIGraphics"
                },
                {
                  "href": "#/DrawState",
                  "$t": "DrawState"
                }
              ]
            }
          },
          {
            "name": "onClick",
            "shortdesc": "An event-handler callback function, called when the element has been clicked"
          },
          {
            "name": "onShortcutKey",
            "shortdesc": {
              "b": "shortcutKey"
            },
            "description": "In Windows only."
          }
        ]
      }
    ]
  },
  {
    "name": "IconButton",
    "dynamic": "true",
    "shortdesc": "A  mouse-sensitive pushbutton that displays an image instead of text.",
    "description": {
      "a": [
        {
          "href": "#/IconButton/event/onClick",
          "$t": "onClick()"
        },
        {
          "href": "#/IconButton/notify",
          "$t": "notify()"
        }
      ]
    },
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "image",
            "shortdesc": "The image object that defines the image to be drawn.",
            "datatype": {
              "type": {
                "href": "#/ScriptUIImage",
                "$t": "ScriptUIImage"
              }
            }
          },
          {
            "name": "active",
            "shortdesc": "True if this element is active.",
            "description": {
              "a": {
                "href": "#/Button",
                "$t": "Button"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "shortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/IconButton/event/onShortcutKey",
                "$t": "onShortcutKey()"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/IconButton/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "i": "preferredSize"
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
            "description": {
              "li": {
                "b": "style"
              }
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type; \"iconbutton\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "notify",
            "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The name of the control event handler to call.",
                "description": {
                  "b": [
                    "onClick",
                    "onChange",
                    "onChanging",
                    "onChange",
                    "onClick"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": [
          {
            "name": "onActivate",
            "shortdesc": "An event-handler callback function, called when the element acquires the keyboard focus.",
            "description": "Called when the user gives the control the keyboard focus by clicking it or tabbing into it."
          },
          {
            "name": "onDeactivate",
            "shortdesc": "An event-handler callback function, called when the element loses the keyboard focus.",
            "description": "Called when the user moves the keyboard focus from the previously active control to another control."
          },
          {
            "name": "onDraw",
            "shortdesc": "An event-handler callback function, called when the window is about to be drawn.",
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics",
                  "$t": "ScriptUIGraphics"
                },
                {
                  "href": "#/DrawState",
                  "$t": "DrawState"
                }
              ]
            }
          },
          {
            "name": "onClick",
            "shortdesc": "An event-handler callback function, called when the element has been clicked."
          },
          {
            "name": "onShortcutKey",
            "shortdesc": {
              "b": "shortcutKey"
            },
            "description": "In Windows only."
          }
        ]
      }
    ]
  },
  {
    "name": "EditText",
    "dynamic": "true",
    "shortdesc": "An editable text field that the user can select and change.",
    "description": {
      "a": [
        {
          "href": "#/EditText/event/onChange",
          "$t": "onChange()"
        },
        {
          "href": "#/EditText/notify",
          "$t": "notify()"
        },
        {
          "href": "#/EditText/event/onChanging",
          "$t": "onChanging()"
        },
        {
          "href": "#/EditText/textselection",
          "$t": "textselection"
        }
      ]
    },
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "textselection",
            "shortdesc": "The currently selected text, or the empty string if there is no text selected.",
            "description": {
              "a": {
                "href": "#/EditText/text",
                "$t": "text"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "characters",
            "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the element.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "justify",
            "shortdesc": "The text justification style.",
            "description": {
              "b": [
                "left",
                "center",
                "right"
              ]
            },
            "datatype": {
              "type": "String",
              "value": "left"
            }
          },
          {
            "name": "text",
            "shortdesc": "The current text displayed in the field, a localizable string.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/EditText/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "i": "preferredSize"
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "active",
            "shortdesc": "True if this element is active.",
            "description": {
              "a": {
                "href": "#/Button",
                "$t": "Button"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "shortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/EditText/event/onShortcutKey",
                "$t": "onShortcutKey()"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
            "description": {
              "li": [
                {
                  "b": "multiline"
                },
                {
                  "b": "readonly"
                },
                {
                  "b": "noecho"
                },
                {
                  "b": "enterKeySignalsOnChange",
                  "br": "onChange",
                  "a": {
                    "href": "#/EditText/event/onChange",
                    "$t": "onChange()"
                  }
                },
                {
                  "b": "wantReturn"
                }
              ]
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type; \"edittext\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "notify",
            "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The name of the control event handler to call.",
                "description": {
                  "b": [
                    "onClick",
                    "onChange",
                    "onChanging",
                    "onChange",
                    "onClick"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": [
          {
            "name": "onActivate",
            "shortdesc": "An event-handler callback function, called when the element acquires the keyboard focus.",
            "description": "Called when the user gives the control the keyboard focus by clicking it or tabbing into it."
          },
          {
            "name": "onDeactivate",
            "shortdesc": "An event-handler callback function, called when the element loses the keyboard focus.",
            "description": "Called when the user moves the keyboard focus from the previously active control to another control."
          },
          {
            "name": "onDraw",
            "shortdesc": "An event-handler callback function, called when the window is about to be drawn.",
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics",
                  "$t": "ScriptUIGraphics"
                },
                {
                  "href": "#/DrawState",
                  "$t": "DrawState"
                }
              ]
            }
          },
          {
            "name": "onChanging",
            "shortdesc": "An event-handler callback function, called when the content of the element is in the process of changing",
            "description": "The handler is called for each keypress while this control has the input focus."
          },
          {
            "name": "onChange",
            "shortdesc": "An event-handler callback function, called when the content of the element has been changed",
            "description": {
              "i": "enterKeySignalsOnChange",
              "br": "properties"
            }
          },
          {
            "name": "onShortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/EditText/shortcutKey",
                "$t": "shortcutKey"
              }
            },
            "description": "In Windows only."
          }
        ]
      }
    ]
  },
  {
    "name": "ListBox",
    "dynamic": "true",
    "shortdesc": {
      "a": {
        "href": "#/ListItem",
        "$t": "ListItem"
      }
    },
    "description": {
      "br": {},
      "a": [
        {
          "href": "#/ListBox/add",
          "$t": "add()"
        },
        {
          "href": "#/ListBox/remove",
          "$t": "remove()"
        },
        {
          "href": "#/ListBox/removeAll",
          "$t": "removeAll()"
        },
        {
          "href": "#/ListItem",
          "$t": "ListItem"
        }
      ]
    },
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "items",
            "rwaccess": "readonly",
            "shortdesc": "The array of choice items displayed in the list.",
            "description": {
              "b": "items.length",
              "a": [
                {
                  "href": "#/ListBox/add",
                  "$t": "add()"
                },
                {
                  "href": "#/ListItem/selected",
                  "$t": "selected"
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/ListItem",
                "$t": "ListItem"
              },
              "array": {}
            }
          },
          {
            "name": "itemSize",
            "shortdesc": "The width and height in pixels of each item in the list.",
            "description": {
              "a": {
                "href": "#/ListBox/preferredSize",
                "$t": "preferredSize"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "selection",
            "shortdesc": "The currently selected item for a single-selection list, or an array of items for current selection in a multi-selection list.",
            "description": {
              "li": [
                "If you set the value to an array for a single-selection list, only the first item in the array is selected.",
                "If you set the value to a single item for a multi-selection list, that item is added to the current selection."
              ]
            },
            "datatype": {
              "type": {
                "href": "#/ListItem",
                "$t": "ListItem"
              }
            }
          },
          {
            "name": "active",
            "shortdesc": "True if this element is active.",
            "description": {
              "a": {
                "href": "#/Button",
                "$t": "Button"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "shortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/ListBox/event/onShortcutKey",
                "$t": "onShortcutKey()"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/ListBox/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "i": "preferredSize"
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/ListItem",
                "$t": "ListItem"
              }
            },
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "columns",
            "rwaccess": "readonly",
            "shortdesc": "For a multi-column list box, the column properties.",
            "description": {
              "li": [
                {
                  "b": "titles"
                },
                {
                  "b": "preferredWidths"
                },
                {
                  "b": "visible"
                }
              ]
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the control (properties used only when the element is created).",
            "description": {
              "li": [
                {
                  "b": "multiselect"
                },
                {
                  "b": "items",
                  "i": "items",
                  "a": {
                    "href": "#/ListBox/add",
                    "$t": "add()"
                  }
                },
                {
                  "b": "numberOfColumns",
                  "a": [
                    {
                      "href": "#/ListItem",
                      "$t": "ListItem"
                    },
                    {
                      "href": "#/ListItem/text",
                      "$t": "text"
                    },
                    {
                      "href": "#/ListItem/image",
                      "$t": "image"
                    },
                    {
                      "href": "#/ListItem/subitems",
                      "$t": "subitems"
                    }
                  ]
                },
                {
                  "b": "showHeaders"
                },
                {
                  "b": "columnWidths"
                },
                {
                  "b": "columnTitles",
                  "i": "showHeaders"
                }
              ]
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type; \"listbox\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "add",
            "shortdesc": "Adds an item to the choices in this list.",
            "description": {
              "a": [
                {
                  "href": "#/ListItem",
                  "$t": "ListItem"
                },
                {
                  "href": "#/ListItem/text",
                  "$t": "text"
                },
                {
                  "href": "#/ListItem/image",
                  "$t": "image"
                },
                {
                  "href": "#/ListItem/subitems",
                  "$t": "subitems"
                }
              ]
            },
            "parameters": {
              "parameter": [
                {
                  "name": "type",
                  "shortdesc": "The type of the child element, the string \"item\".",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "text",
                  "optional": "true",
                  "shortdesc": "The localizable text label for the item.",
                  "datatype": {
                    "type": "String"
                  }
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/ListItem",
                "$t": "ListItem"
              }
            }
          },
          {
            "name": "find",
            "shortdesc": "Retrieves an item object from the list that has a given text label.",
            "parameters": {
              "parameter": {
                "name": "text",
                "shortdesc": "The text string to match.",
                "datatype": {
                  "type": "String"
                }
              }
            },
            "datatype": {
              "type": {
                "href": "#/ListItem",
                "$t": "ListItem"
              }
            }
          },
          {
            "name": "remove",
            "shortdesc": "Removes a child item from the list.",
            "parameters": {
              "parameter": {
                "name": "what",
                "shortdesc": {
                  "a": {
                    "href": "#/ListItem",
                    "$t": "ListItem"
                  }
                },
                "datatype": {
                  "type": "Any"
                }
              }
            }
          },
          {
            "name": "removeAll",
            "shortdesc": "Removes all child items from the list."
          },
          {
            "name": "notify",
            "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The name of the control event handler to call.",
                "description": {
                  "b": [
                    "onClick",
                    "onChange",
                    "onChanging",
                    "onChange",
                    "onClick"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": [
          {
            "name": "onActivate",
            "shortdesc": "An event-handler callback function, called when the element acquires the keyboard focus.",
            "description": "Called when the user gives the control the keyboard focus by clicking it or tabbing into it."
          },
          {
            "name": "onDeactivate",
            "shortdesc": "An event-handler callback function, called when the element loses the keyboard focus.",
            "description": "Called when the user moves the keyboard focus from the previously active control to another control."
          },
          {
            "name": "onChange",
            "shortdesc": "An event-handler callback function, called when the content of the element has been changed"
          },
          {
            "name": "onDoubleClick",
            "shortdesc": "An event-handler callback function, called when an item in the listbox is double-clicked",
            "description": {
              "a": {
                "href": "#/ListBox/selection",
                "$t": "selection"
              }
            }
          },
          {
            "name": "onShortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/ListBox/shortcutKey",
                "$t": "shortcutKey"
              }
            },
            "description": "In Windows only."
          },
          {
            "name": "onDraw",
            "shortdesc": "An event-handler callback function, called when the window is about to be drawn.",
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics",
                  "$t": "ScriptUIGraphics"
                },
                {
                  "href": "#/DrawState",
                  "$t": "DrawState"
                }
              ]
            }
          }
        ]
      }
    ]
  },
  {
    "name": "DropDownList",
    "dynamic": "true",
    "shortdesc": "Displays a single visible item. When you click the control, a list drops down or pops up, and allows you to select one of the other items in the list.",
    "description": {
      "a": [
        {
          "href": "#/DropDownList/add",
          "$t": "add()"
        },
        {
          "href": "#/DropDownList/event/onChange",
          "$t": "onChange()"
        },
        {
          "href": "#/DropDownList/notify",
          "$t": "notify()"
        }
      ]
    },
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "items",
            "rwaccess": "readonly",
            "shortdesc": "The array of choice items displayed in the drop-down or pop-up list.",
            "description": {
              "br": "items.length",
              "a": [
                {
                  "href": "#/DropDownList/add",
                  "$t": "add()"
                },
                {
                  "href": "#/ListItem/selected",
                  "$t": "selected"
                }
              ],
              "b": "separator"
            },
            "datatype": {
              "type": {
                "href": "#/ListItem",
                "$t": "ListItem"
              },
              "array": {}
            }
          },
          {
            "name": "itemSize",
            "shortdesc": "The width and height in pixels of each item in the list.",
            "description": {
              "a": {
                "href": "#/DropDownList/preferredSize",
                "$t": "preferredSize"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "selection",
            "shortdesc": "The currently selected  list item.",
            "description": "Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference.",
            "datatype": {
              "type": {
                "href": "#/ListItem",
                "$t": "ListItem"
              }
            }
          },
          {
            "name": "active",
            "shortdesc": "True if this element is active.",
            "description": {
              "a": {
                "href": "#/Button",
                "$t": "Button"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "shortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/DropDownList/event/onShortcutKey",
                "$t": "onShortcutKey()"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/DropDownList/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "i": "preferredSize"
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
            "description": {
              "li": {
                "b": "items",
                "i": "items",
                "a": {
                  "href": "#/DropDownList/add",
                  "$t": "add()"
                }
              }
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type; \"dropdownlist\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "add",
            "shortdesc": "Adds an item or separator to the choices in this list.",
            "description": "Returns the item control object for type=\"item\", or null for type=\"separator\".",
            "parameters": {
              "parameter": [
                {
                  "name": "type",
                  "shortdesc": "The type of the child element.",
                  "description": {
                    "b": [
                      "item",
                      "separator"
                    ]
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "text",
                  "optional": "true",
                  "shortdesc": "The localizable text label for the item.",
                  "datatype": {
                    "type": "String"
                  }
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/ListItem",
                "$t": "ListItem"
              }
            }
          },
          {
            "name": "find",
            "shortdesc": "Retrieves an item object from the list that has a given text label.",
            "parameters": {
              "parameter": {
                "name": "text",
                "shortdesc": "The text string to match.",
                "datatype": {
                  "type": "String"
                }
              }
            },
            "datatype": {
              "type": {
                "href": "#/ListItem",
                "$t": "ListItem"
              }
            }
          },
          {
            "name": "remove",
            "shortdesc": "Removes a child item from the list.",
            "parameters": {
              "parameter": {
                "name": "what",
                "shortdesc": {
                  "a": {
                    "href": "#/ListItem",
                    "$t": "ListItem"
                  }
                },
                "datatype": {
                  "type": "Any"
                }
              }
            }
          },
          {
            "name": "removeAll",
            "shortdesc": "Removes all child items from the list."
          },
          {
            "name": "notify",
            "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The name of the control event handler to call.",
                "description": {
                  "b": [
                    "onClick",
                    "onChange",
                    "onChanging",
                    "onChange",
                    "onClick"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": [
          {
            "name": "onActivate",
            "shortdesc": "An event-handler callback function, called when the element acquires the keyboard focus.",
            "description": "Called when the user gives the control the keyboard focus by clicking it or tabbing into it."
          },
          {
            "name": "onDeactivate",
            "shortdesc": "An event-handler callback function, called when the element loses the keyboard focus.",
            "description": "Called when the user moves the keyboard focus from the previously active control to another control."
          },
          {
            "name": "onChange",
            "shortdesc": "An event-handler callback function, called when the content of the element has been changed"
          },
          {
            "name": "onShortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/DropDownList/shortcutKey",
                "$t": "shortcutKey"
              }
            },
            "description": "In Windows only."
          },
          {
            "name": "onDraw",
            "shortdesc": "An event-handler callback function, called when the window is about to be drawn.",
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics",
                  "$t": "ScriptUIGraphics"
                },
                {
                  "href": "#/DrawState",
                  "$t": "DrawState"
                }
              ]
            }
          }
        ]
      }
    ]
  },
  {
    "name": "ListItem",
    "dynamic": "true",
    "shortdesc": "An item in a list box, drop-down list, or tree view.",
    "description": {
      "i": "add()",
      "a": [
        {
          "href": "#/ListBox/add",
          "$t": "ListBox.add()"
        },
        {
          "href": "#/DropDownList/add",
          "$t": "DropDownList.add()"
        },
        {
          "href": "#/TreeView/add",
          "$t": "TreeView.add()"
        },
        {
          "href": "#/DropDownList",
          "$t": "DropDownList"
        },
        {
          "href": "#/ListItem/text",
          "$t": "text"
        },
        {
          "href": "#/ListItem/image",
          "$t": "image"
        },
        {
          "href": "#/ListItem/subitems",
          "$t": "subitems"
        }
      ],
      "br": {}
    },
    "elements": {
      "type": "instance",
      "property": [
        {
          "name": "checked",
          "shortdesc": "The checked state of an item in a list.",
          "description": "When true, the item is marked with the platform-appropriate checkmark. When false, no checkmark is drawn, but space is reserved for it in the left margin, so that the item lines up with other checkable items. When undefined, no space is reserved for a checkmark.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "expanded",
          "shortdesc": {
            "i": "node",
            "a": {
              "href": "#/TreeView",
              "$t": "TreeView"
            }
          },
          "description": "When true, the item is in the expanded state and its children are shown, when false, it is collapsed and children are hidden.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "index",
          "rwaccess": "readonly",
          "shortdesc": {
            "i": "items"
          },
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "selected",
          "shortdesc": "The selection state of this item.",
          "description": "When true, the item is part of the selection for its parent list. When false, the item is not selected. Set to true to select this item in a single-selection list, or to add it to the selection array for a multi-selection list.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "image",
          "shortdesc": "An image object for an icon to display in the item.",
          "description": {
            "a": {
              "href": "#/ListItem/subitems",
              "$t": "subitems"
            }
          },
          "datatype": {
            "type": {
              "href": "#/ScriptUIImage",
              "$t": "ScriptUIImage"
            }
          }
        },
        {
          "name": "text",
          "shortdesc": "The label text to display for the item, a localizable string.",
          "description": {
            "a": {
              "href": "#/ListItem/subitems",
              "$t": "subitems"
            }
          },
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "subItems",
          "rwaccess": "readonly",
          "shortdesc": {
            "a": {
              "href": "#/ListBox",
              "$t": "ListBox"
            }
          },
          "description": {
            "li": [
              {
                "b": "text"
              },
              {
                "b": "image",
                "a": {
                  "href": "#/ScriptUIImage",
                  "$t": "ScriptUIImage"
                }
              }
            ]
          },
          "datatype": {
            "type": "Array"
          }
        },
        {
          "name": "properties",
          "shortdesc": "An object that contains one or more creation properties of the item (properties used only when the element is created).",
          "description": "A ListItem object has no creation properties.",
          "datatype": {
            "type": "Object"
          }
        },
        {
          "name": "parent",
          "rwaccess": "readonly",
          "shortdesc": "The parent element, a list control.",
          "datatype": {
            "type": "Object"
          }
        },
        {
          "name": "type",
          "rwaccess": "readonly",
          "shortdesc": "The element type.",
          "description": {
            "a": {
              "href": "#/DropDownList",
              "$t": "DropDownList"
            }
          },
          "datatype": {
            "type": "String"
          }
        }
      ]
    }
  },
  {
    "name": "Checkbox",
    "dynamic": "true",
    "shortdesc": {
      "a": [
        {
          "href": "#/Checkbox/value",
          "$t": "value"
        },
        {
          "href": "#/Checkbox/value",
          "$t": "value"
        }
      ]
    },
    "description": {
      "a": [
        {
          "href": "#/Checkbox/event/onClick",
          "$t": "onClick()"
        },
        {
          "href": "#/Checkbox/notify",
          "$t": "notify()"
        }
      ]
    },
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "value",
            "shortdesc": "The selection state of the control.",
            "description": "When true, the control is in the selected or set state and displays the check mark. When false, shows an empty box.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "characters",
            "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the element.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "justify",
            "shortdesc": "The default text justification style for child text elements.",
            "description": {
              "b": [
                "left",
                "center",
                "right"
              ]
            },
            "datatype": {
              "type": "String",
              "value": "left"
            }
          },
          {
            "name": "text",
            "shortdesc": "The text to display, a localizable string.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "active",
            "shortdesc": "True if this element is active.",
            "description": {
              "a": {
                "href": "#/Button",
                "$t": "Button"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "shortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/Checkbox/event/onShortcutKey",
                "$t": "onShortcutKey()"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/Checkbox/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "i": "preferredSize"
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the item (properties used only when the element is created).",
            "description": {
              "a": {
                "href": "#/Checkbox/add",
                "$t": "add()"
              }
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type; \"checkbox\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "notify",
            "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The name of the control event handler to call.",
                "description": {
                  "b": [
                    "onClick",
                    "onChange",
                    "onChanging",
                    "onChange",
                    "onClick"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": [
          {
            "name": "onActivate",
            "shortdesc": "An event-handler callback function, called when the element acquires the keyboard focus.",
            "description": "Called when the user gives the control the keyboard focus by clicking it or tabbing into it."
          },
          {
            "name": "onDeactivate",
            "shortdesc": "An event-handler callback function, called when the element loses the keyboard focus.",
            "description": "Called when the user moves the keyboard focus from the previously active control to another control."
          },
          {
            "name": "onDraw",
            "shortdesc": "An event-handler callback function, called when the window is about to be drawn.",
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics",
                  "$t": "ScriptUIGraphics"
                },
                {
                  "href": "#/DrawState",
                  "$t": "DrawState"
                }
              ]
            }
          },
          {
            "name": "onClick",
            "shortdesc": "An event-handler callback function, called when the element has been clicked."
          },
          {
            "name": "onShortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/Checkbox/shortcutKey",
                "$t": "shortcutKey"
              }
            },
            "description": "In Windows only."
          }
        ]
      }
    ]
  },
  {
    "name": "Scrollbar",
    "dynamic": "true",
    "shortdesc": "A scrollbar with a draggable scroll indicator and stepper buttons to move the indicator.",
    "description": {
      "a": [
        {
          "href": "#/Scrollbar/event/onChange",
          "$t": "onChange()"
        },
        {
          "href": "#/Scrollbar/notify",
          "$t": "notify()"
        },
        {
          "href": "#/Scrollbar/event/onChanging",
          "$t": "onChanging()"
        },
        {
          "href": "#/EditText",
          "$t": "EditText"
        }
      ]
    },
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "stepdelta",
            "shortdesc": "The amount by which to increment or decrement a scrollbar element's position when the user clicks a stepper button.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "jumpdelta",
            "shortdesc": "The amount to increment or decrement a scrollbar indicator's position when the user clicks ahead or behind the moveable element.",
            "description": "Default is 20% of the range between the maxvalue and minvalue property values.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "value",
            "shortdesc": "The current position of the indicator.",
            "description": "If set to a value outside the range specified by minvalue and maxvalue, it is automatically reset to the closest boundary.",
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "minvalue",
            "shortdesc": {
              "b": "value"
            },
            "description": {
              "a": {
                "href": "#/Scrollbar/maxvalue",
                "$t": "maxvalue"
              }
            },
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "maxvalue",
            "shortdesc": {
              "b": "value"
            },
            "description": {
              "a": {
                "href": "#/Scrollbar/minvalue",
                "$t": "minvalue"
              }
            },
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "active",
            "shortdesc": "True if this element is active.",
            "description": {
              "a": {
                "href": "#/Button",
                "$t": "Button"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "shortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/Scrollbar/event/onShortcutKey",
                "$t": "onShortcutKey()"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/Scrollbar/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": [
                {
                  "href": "#LayoutManager",
                  "$t": "LayoutManager"
                },
                {
                  "href": "#/Scrollbar/preferredSize",
                  "$t": "preferredSize"
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
            "description": {
              "a": {
                "href": "#/Scrollbar/add",
                "$t": "add()"
              }
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type, \"scrollbar\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "notify",
            "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The name of the control event handler to call.",
                "description": {
                  "b": [
                    "onClick",
                    "onChange",
                    "onChanging",
                    "onChange",
                    "onClick"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": [
          {
            "name": "onActivate",
            "shortdesc": "An event-handler callback function, called when the element acquires the keyboard focus.",
            "description": "Called when the user gives the control the keyboard focus by clicking it or tabbing into it."
          },
          {
            "name": "onDeactivate",
            "shortdesc": "An event-handler callback function, called when the element loses the keyboard focus.",
            "description": "Called when the user moves the keyboard focus from the previously active control to another control."
          },
          {
            "name": "onDraw",
            "shortdesc": "An event-handler callback function, called when the window is about to be drawn.",
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics",
                  "$t": "ScriptUIGraphics"
                },
                {
                  "href": "#/DrawState",
                  "$t": "DrawState"
                }
              ]
            }
          },
          {
            "name": "onChanging",
            "shortdesc": "An event-handler callback function, called when the content of the element is in the process of changing",
            "description": "The handler is called for any motion of the position indicator while this control has the input focus."
          },
          {
            "name": "onChange",
            "shortdesc": "An event-handler callback function, called when the user has finished dragging the position indicator, or has clicked the control."
          },
          {
            "name": "onShortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/Scrollbar/shortcutKey",
                "$t": "shortcutKey"
              }
            },
            "description": "In Windows only."
          }
        ]
      }
    ]
  },
  {
    "name": "RadioButton",
    "dynamic": "true",
    "shortdesc": "A dual-state control, grouped with other radiobuttons, of which only one can be in the selected state.",
    "description": {
      "a": [
        {
          "href": "#/RadioButton/value",
          "$t": "value"
        },
        {
          "href": "#/RadioButton/value",
          "$t": "value"
        },
        {
          "href": "#/RadioButton/event/onClick",
          "$t": "onClick()"
        },
        {
          "href": "#/RadioButton/notify",
          "$t": "notify()"
        }
      ]
    },
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "value",
            "shortdesc": "The selection state of this button, selected when true.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "characters",
            "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the element.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "justify",
            "shortdesc": "The default text justification style for child text elements.",
            "description": {
              "b": [
                "left",
                "center",
                "right"
              ]
            },
            "datatype": {
              "type": "String",
              "value": "left"
            }
          },
          {
            "name": "text",
            "shortdesc": "The label text for this button, a localizable string.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "active",
            "shortdesc": "True if this element is active.",
            "description": {
              "a": {
                "href": "#/Button",
                "$t": "Button"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "shortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/RadioButton/event/onShortcutKey",
                "$t": "onShortcutKey()"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/RadioButton/event/onDraw()",
                "$t": "onDraw"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes. A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": [
                {
                  "href": "#LayoutManager",
                  "$t": "LayoutManager"
                },
                {
                  "href": "#/RadioButton/preferredSize",
                  "$t": "preferredSize"
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
            "description": {
              "a": {
                "href": "#/RadioButton/add",
                "$t": "add()"
              }
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type; \"radiobutton\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "notify",
            "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The name of the control event handler to call.",
                "description": {
                  "b": [
                    "onClick",
                    "onChange",
                    "onChanging",
                    "onChange",
                    "onClick"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": [
          {
            "name": "onActivate",
            "shortdesc": "An event-handler callback function, called when the element acquires the keyboard focus.",
            "description": "Called when the user gives the control the keyboard focus by clicking it or tabbing into it."
          },
          {
            "name": "onDeactivate",
            "shortdesc": "An event-handler callback function, called when the element loses the keyboard focus.",
            "description": "Called when the user moves the keyboard focus from the previously active control to another control."
          },
          {
            "name": "onDraw",
            "shortdesc": "An event-handler callback function, called when the window is about to be drawn.",
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics",
                  "$t": "ScriptUIGraphics"
                },
                {
                  "href": "#/DrawState",
                  "$t": "DrawState"
                }
              ]
            }
          },
          {
            "name": "onClick",
            "shortdesc": "An event-handler callback function, called when the element has been clicked."
          },
          {
            "name": "onShortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/RadioButton/shortcutKey",
                "$t": "shortcutKey"
              }
            },
            "description": "In Windows only."
          }
        ]
      }
    ]
  },
  {
    "name": "Slider",
    "dynamic": "true",
    "shortdesc": "A slider bar that indicates a numeric value with a moveable position indicator.",
    "description": {
      "a": [
        {
          "href": "#/Slider/event/onChange",
          "$t": "onChange()"
        },
        {
          "href": "#/Slider/notify",
          "$t": "notify()"
        },
        {
          "href": "#/Slider/event/onChanging",
          "$t": "onChanging()"
        },
        {
          "href": "#/Slider/value",
          "$t": "value"
        },
        {
          "href": "#/Slider/minvalue",
          "$t": "minvalue"
        },
        {
          "href": "#/Slider/maxvalue",
          "$t": "maxvalue"
        }
      ]
    },
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "value",
            "shortdesc": "The current position of the indicator.",
            "description": {
              "a": [
                {
                  "href": "#/Slider/minvalue",
                  "$t": "minvalue"
                },
                {
                  "href": "#/Slider/maxvalue",
                  "$t": "maxvalue"
                }
              ]
            },
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "minvalue",
            "shortdesc": {
              "a": {
                "href": "#/Slider/value",
                "$t": "value"
              }
            },
            "description": {
              "a": {
                "href": "#/Slider/maxvalue",
                "$t": "maxvalue"
              }
            },
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "maxvalue",
            "shortdesc": {
              "a": {
                "href": "#/Slider/value",
                "$t": "value"
              }
            },
            "description": {
              "a": {
                "href": "#/Slider/minvalue",
                "$t": "minvalue"
              }
            },
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "active",
            "shortdesc": "True if this element is active.",
            "description": {
              "a": {
                "href": "#/Button",
                "$t": "Button"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "shortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/Slider/event/onShortcutKey",
                "$t": "onShortcutKey()"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/Slider/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": [
                {
                  "href": "#LayoutManager",
                  "$t": "LayoutManager"
                },
                {
                  "href": "#/Slider/preferredSize",
                  "$t": "preferredSize"
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
            "description": {
              "a": {
                "href": "#/Slider/add",
                "$t": "add()"
              }
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type, \"slider\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "notify",
            "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The name of the control event handler to call.",
                "description": {
                  "b": [
                    "onClick",
                    "onChange",
                    "onChanging",
                    "onChange",
                    "onClick"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": [
          {
            "name": "onActivate",
            "shortdesc": "An event-handler callback function, called when the element acquires the keyboard focus.",
            "description": "Called when the user gives the control the keyboard focus by clicking it or tabbing into it."
          },
          {
            "name": "onDeactivate",
            "shortdesc": "An event-handler callback function, called when the element loses the keyboard focus.",
            "description": "Called when the user moves the keyboard focus from the previously active control to another control."
          },
          {
            "name": "onDraw",
            "shortdesc": "An event-handler callback function, called when the window is about to be drawn.",
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics",
                  "$t": "ScriptUIGraphics"
                },
                {
                  "href": "#/DrawState",
                  "$t": "DrawState"
                }
              ]
            }
          },
          {
            "name": "onChanging",
            "shortdesc": "An event-handler callback function, called when the content of the element is in the process of changing",
            "description": "The handler is called for any motion of the position indicator while this control has the input focus."
          },
          {
            "name": "onChange",
            "shortdesc": "An event-handler callback function, called when the user has finished dragging the position indicator, or has clicked the control."
          },
          {
            "name": "onShortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/Slider/shortcutKey",
                "$t": "shortcutKey"
              }
            },
            "description": "In Windows only."
          }
        ]
      }
    ]
  },
  {
    "name": "Progressbar",
    "dynamic": "true",
    "shortdesc": "A horizontal bar with an indicator that shows the progress of an operation.",
    "description": {
      "a": [
        {
          "href": "#/Progressbar/value",
          "$t": "value"
        },
        {
          "href": "#/Progressbar/minvalue",
          "$t": "minvalue"
        }
      ]
    },
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "value",
            "shortdesc": "The current position of the indicator.",
            "description": {
              "a": {
                "href": "#/Progressbar/maxvalue",
                "$t": "maxvalue"
              }
            },
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "minvalue",
            "shortdesc": "The minimum value in the range; always 0. If set to a different value, it is ignored.",
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "maxvalue",
            "shortdesc": "The maximum value in the range. Default is 100.",
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/Progressbar/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": [
                {
                  "href": "#LayoutManager",
                  "$t": "LayoutManager"
                },
                {
                  "href": "#/Progressbar/preferredSize",
                  "$t": "preferredSize"
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
            "description": {
              "a": {
                "href": "#/ProgressBar/add",
                "$t": "add()"
              }
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type, \"progessbar\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": {
          "name": "onDraw",
          "shortdesc": "An event-handler callback function, called when the window is about to be drawn.",
          "description": {
            "a": [
              {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              },
              {
                "href": "#/DrawState",
                "$t": "DrawState"
              }
            ]
          }
        }
      }
    ]
  },
  {
    "name": "TreeView",
    "dynamic": "true",
    "shortdesc": "A hierarchical list whose items can contain child items.",
    "description": {
      "a": [
        {
          "href": "#/ListItem",
          "$t": "ListItem"
        },
        {
          "href": "#/TreeView/items",
          "$t": "items"
        }
      ],
      "i": "node"
    },
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "items",
            "rwaccess": "readonly",
            "shortdesc": "The array of top-level items displayed in the list.",
            "description": {
              "b": "items.length",
              "a": {
                "href": "#/TreeView/add",
                "$t": "add()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ListItem",
                "$t": "ListItem"
              },
              "array": {}
            }
          },
          {
            "name": "itemSize",
            "shortdesc": "The width and height in pixels of each item in the list.",
            "description": {
              "a": {
                "href": "#/TreeView/preferredSize",
                "$t": "preferredSize"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "selection",
            "shortdesc": "The currently selected  list item.",
            "description": "Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference.",
            "datatype": {
              "type": {
                "href": "#/ListItem",
                "$t": "ListItem"
              }
            }
          },
          {
            "name": "active",
            "shortdesc": "True if this element is active.",
            "description": {
              "a": {
                "href": "#/Button",
                "$t": "Button"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "shortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/TreeView/event/onShortcutKey",
                "$t": "onShortcutKey()"
              }
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/TreeView/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": [
                {
                  "href": "#LayoutManager",
                  "$t": "LayoutManager"
                },
                {
                  "href": "#/TreeView/preferredSize",
                  "$t": "preferredSize"
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the control (properties used only when the element is created).",
            "description": {
              "li": {
                "b": "items",
                "i": "items",
                "a": {
                  "href": "#/TreeView/add",
                  "$t": "add()"
                }
              }
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type, \"treeview\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "add",
            "shortdesc": "Adds an item to the top-level choices in this list.",
            "description": "Returns the item control object.",
            "parameters": {
              "parameter": [
                {
                  "name": "type",
                  "shortdesc": "The type of the child element, the string \"item\".",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "text",
                  "optional": "true",
                  "shortdesc": "The localizable text label for the item.",
                  "datatype": {
                    "type": "String"
                  }
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/ListItem",
                "$t": "ListItem"
              }
            }
          },
          {
            "name": "find",
            "shortdesc": "Retrieves an item object from the list that has a given text label.",
            "parameters": {
              "parameter": {
                "name": "text",
                "shortdesc": "The text string to match.",
                "datatype": {
                  "type": "String"
                }
              }
            },
            "datatype": {
              "type": {
                "href": "#/ListItem",
                "$t": "ListItem"
              }
            }
          },
          {
            "name": "remove",
            "shortdesc": "Removes a child item from the list.",
            "parameters": {
              "parameter": {
                "name": "what",
                "shortdesc": {
                  "a": {
                    "href": "#/ListItem",
                    "$t": "ListItem"
                  }
                },
                "datatype": {
                  "type": "Any"
                }
              }
            }
          },
          {
            "name": "removeAll",
            "shortdesc": "Removes all child items from the list."
          },
          {
            "name": "notify",
            "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The name of the control event handler to call.",
                "description": {
                  "b": [
                    "onClick",
                    "onChange",
                    "onChanging",
                    "onChange",
                    "onClick"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": [
          {
            "name": "onActivate",
            "shortdesc": "An event-handler callback function, called when the element acquires the keyboard focus.",
            "description": "Called when the user gives the control the keyboard focus by clicking it or tabbing into it."
          },
          {
            "name": "onDeactivate",
            "shortdesc": "An event-handler callback function, called when the element loses the keyboard focus.",
            "description": "Called when the user moves the keyboard focus from the previously active control to another control."
          },
          {
            "name": "onCollapse",
            "shortdesc": "An event-handler callback function, called when the user collapses (closes) an expanded node in the treeview.",
            "parameters": {
              "parameter": {
                "name": "item",
                "shortdesc": {
                  "a": {
                    "href": "#/ListItem",
                    "$t": "ListItem"
                  }
                },
                "datatype": {
                  "type": "ListItem"
                }
              }
            }
          },
          {
            "name": "onDraw",
            "shortdesc": "An event-handler callback function, called when the window is about to be drawn.",
            "description": {
              "a": [
                {
                  "href": "#/ScriptUIGraphics",
                  "$t": "ScriptUIGraphics"
                },
                {
                  "href": "#/DrawState",
                  "$t": "DrawState"
                }
              ]
            }
          },
          {
            "name": "onExpand",
            "shortdesc": "An event-handler callback function, called when the user expands (opens) a collapsed node in the treeview.",
            "parameters": {
              "parameter": {
                "name": "item",
                "shortdesc": {
                  "a": {
                    "href": "#/ListItem",
                    "$t": "ListItem"
                  }
                },
                "datatype": {
                  "type": "ListItem"
                }
              }
            }
          },
          {
            "name": "onChange",
            "shortdesc": "An event-handler callback function, called when the content of the element has been changed"
          },
          {
            "name": "onShortcutKey",
            "shortdesc": {
              "a": {
                "href": "#/TreeView/shortcutKey",
                "$t": "shortcutKey"
              }
            },
            "description": "In Windows only."
          }
        ]
      }
    ]
  },
  {
    "name": "FlashPlayer",
    "dynamic": "true",
    "shortdesc": "A control that contains a Flash Player, which can load and play Flash movies stored in SWF files.",
    "description": "The ScriptUI FlashPlayer element runs the Flash application within an Adobe application. The Flash application runs ActionScript, a different implementation of JavaScript from the ExtendScript version of JavaScript that Adobe applications run. A control object of this type contains functions that allow your script to load SWF files, control movie playback, and communicate with the ActionScript environment.",
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "active",
            "shortdesc": "True if this element is active.",
            "description": {
              "a": {
                "href": "#/Button",
                "$t": "Button"
              }
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "i": "preferredSize"
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
            "description": "A FlashPlayer object has no creation properties.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type, \"flashplayer\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "invokePlayerFunction",
            "shortdesc": "Invokes an ActionScript function defined in the Flash application.",
            "description": "Returns the result of the invoked function, which must be one of the allowed types. The ActionScript class and date objects are not supported as return values.",
            "parameters": {
              "parameter": [
                {
                  "name": "name",
                  "shortdesc": "The name of a Flash ActionScript function that has been registered with the ExternalInterface object by the currently loaded SWF file.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "argument",
                  "optional": "true",
                  "shortdesc": "An argument to pass through to the function.",
                  "description": "There can be any number of arguments. An argument must be one of these data types:Number, String, Boolean, null, undefined, Object, Array. No other data types are supported.",
                  "datatype": {
                    "type": "Any"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Any"
            }
          },
          {
            "name": "loadMovie",
            "shortdesc": "Loads a movie into the Flash Player, and begins playing it.",
            "parameters": {
              "parameter": {
                "name": "file",
                "shortdesc": "The File object for the SWF file to load.",
                "datatype": {
                  "type": {
                    "href": "$COMMON/javascript.xml#/File",
                    "$t": "File"
                  }
                }
              }
            }
          },
          {
            "name": "playMovie",
            "shortdesc": "Restarts a movie that has been stopped.",
            "description": {
              "br": {}
            },
            "parameters": {
              "parameter": {
                "name": "rewind",
                "shortdesc": "When true, restarts the movie from the beginning; otherwise, starts playing from the\tpoint where it was stopped.",
                "datatype": {
                  "type": "Boolean",
                  "value": "false"
                }
              }
            }
          },
          {
            "name": "stopMovie",
            "shortdesc": "Halts playback of the current movie.",
            "description": {
              "br": {}
            }
          },
          {
            "name": "notify",
            "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
            "parameters": {
              "parameter": {
                "name": "eventName",
                "optional": "true",
                "shortdesc": "The name of the control event handler to call.",
                "description": {
                  "b": [
                    "onClick",
                    "onChange",
                    "onChanging",
                    "onChange",
                    "onClick"
                  ]
                },
                "datatype": {
                  "type": "String"
                }
              }
            }
          },
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": {
          "name": "callback",
          "shortdesc": "A function definition for a callback from the Flash ActionScript environment.",
          "description": "The Flash ActionScript code can call any callback function defined on the ExtendScript side of the FlashPlayer object, invoking it by name as a property of the control object. The function can take any arguments of a supported data types, and can return any value of a supported data type. data types:Number, String, Boolean, null, undefined, Object, Array."
        }
      }
    ]
  },
  {
    "name": "Group",
    "dynamic": "true",
    "shortdesc": "A container for other controls within a window.",
    "description": "A group can specify layout options for its child elements. Hiding a group hides all its children. Making it visible makes visible those children that are not individually hidden.",
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#/Group/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "i": "preferredSize"
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignChildren",
            "shortdesc": "Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.",
            "description": {
              "b": [
                "alignment",
                "alignChildren",
                "alignment"
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "layout",
            "shortdesc": "The layout manager for this container.",
            "description": {
              "a": [
                {
                  "href": "#/LayoutManager/layout",
                  "$t": "layout()"
                },
                {
                  "href": "#/LayoutManager",
                  "$t": "LayoutManager"
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/LayoutManager",
                "$t": "LayoutManager"
              }
            }
          },
          {
            "name": "margins",
            "shortdesc": "The number of pixels between the edges of a container and the outermost child elements.",
            "description": "You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.",
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "orientation",
            "shortdesc": "The layout orientation of children in a container.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "b": [
                "row",
                "column",
                "stack",
                "alignChildren",
                "alignment"
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "spacing",
            "shortdesc": "The number of pixels separating one child element from its adjacent sibling element.",
            "description": "Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.",
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the control (properties used only when the element is created).",
            "description": "A Group object has no creation properties.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type; \"group\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "add",
            "shortdesc": "Adds a child element to this container.",
            "description": "Creates and returns a new control or container object and adds it to the children of this group.",
            "parameters": {
              "parameter": [
                {
                  "name": "type",
                  "shortdesc": {
                    "i": "type"
                  },
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "bounds",
                  "optional": "true",
                  "shortdesc": "A bounds specification that describes the size and position of the new control or container, relative to its parent.",
                  "description": {
                    "a": {
                      "href": "#/Bounds",
                      "$t": "Bounds"
                    },
                    "b": "bounds"
                  },
                  "datatype": {
                    "type": {
                      "href": "#/Bounds",
                      "$t": "Bounds"
                    }
                  }
                },
                {
                  "name": "text",
                  "optional": "true",
                  "shortdesc": "The text or label, a localizable string.",
                  "description": {
                    "b": "text"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "properties",
                  "optional": "true",
                  "shortdesc": "An object that contains one or more creation properties of the new child (properties used only when the element is created).",
                  "description": {
                    "br": "properties"
                  },
                  "datatype": {
                    "type": "Object"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "remove",
            "shortdesc": {
              "a": {
                "href": "#/Group/children",
                "$t": "children"
              }
            },
            "description": "No error results if the child does not exist.",
            "parameters": {
              "parameter": {
                "name": "what",
                "shortdesc": {
                  "b": "text"
                },
                "datatype": {
                  "type": "Any"
                }
              }
            }
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": {
          "name": "onDraw",
          "shortdesc": "An event-handler callback function, called when the group is about to be drawn.",
          "description": {
            "a": [
              {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              },
              {
                "href": "#/DrawState",
                "$t": "DrawState"
              }
            ]
          }
        }
      }
    ]
  },
  {
    "name": "Panel",
    "dynamic": "true",
    "shortdesc": "A container for other types of controls, with an optional frame.",
    "description": "A panel can specify layout options for its child elements. Hiding a panel hides all its children. Making it visible makes visible those children that are not individually hidden.",
    "elements": [
      {
        "type": "instance",
        "property": [
          {
            "name": "characters",
            "shortdesc": {
              "a": {
                "href": "#Panel/preferredSize",
                "$t": "preferredSize"
              }
            },
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "justify",
            "shortdesc": "The default text justification style for child text elements.",
            "description": {
              "b": [
                "left",
                "center",
                "right"
              ]
            },
            "datatype": {
              "type": "String",
              "value": "left"
            }
          },
          {
            "name": "text",
            "shortdesc": "The title or label text, a localizable string.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "graphics",
            "rwaccess": "readonly",
            "shortdesc": {
              "a": {
                "href": "#Panel/event/onDraw",
                "$t": "onDraw()"
              }
            },
            "datatype": {
              "type": {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              }
            }
          },
          {
            "name": "visible",
            "shortdesc": "True if this element is shown, false if it is hidden.",
            "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bounds",
            "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
            "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "location",
            "shortdesc": "The upper left corner of this element's frame relative to its parent.",
            "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
            "datatype": {
              "type": {
                "href": "#/Point",
                "$t": "Point"
              }
            }
          },
          {
            "name": "maximumSize",
            "shortdesc": "The maximum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "minimumSize",
            "shortdesc": "The minimum height and width to which the element can be resized.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "preferredSize",
            "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
            "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "size",
            "shortdesc": "The current dimensions of this element.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "i": "preferredSize"
            },
            "datatype": {
              "type": {
                "href": "#/Dimension",
                "$t": "Dimension"
              }
            }
          },
          {
            "name": "windowBounds",
            "rwaccess": "readonly",
            "shortdesc": "The bounds of this element relative to the top-level parent window.",
            "datatype": {
              "type": {
                "href": "#/Bounds",
                "$t": "Bounds"
              }
            }
          },
          {
            "name": "alignChildren",
            "shortdesc": "Specifies how to align the child elements.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "children",
            "rwaccess": "readonly",
            "shortdesc": "An array of child elements.",
            "datatype": {
              "type": "Object",
              "array": {}
            }
          },
          {
            "name": "layout",
            "shortdesc": "The layout manager for this container.",
            "description": {
              "a": [
                {
                  "href": "#LayoutManager/layout",
                  "$t": "layout()"
                },
                {
                  "href": "#LayoutManager",
                  "$t": "LayoutManager"
                }
              ]
            },
            "datatype": {
              "type": {
                "href": "#/LayoutManager",
                "$t": "LayoutManager"
              }
            }
          },
          {
            "name": "margins",
            "shortdesc": "The number of pixels between the edges of a container and the outermost child elements.",
            "description": "You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.",
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "orientation",
            "shortdesc": "The layout orientation of children in a container.",
            "description": {
              "a": {
                "href": "#LayoutManager",
                "$t": "LayoutManager"
              },
              "b": [
                "row",
                "column",
                "stack",
                "alignChildren",
                "alignment"
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "spacing",
            "shortdesc": "The number of pixels separating one child element from its adjacent sibling element.",
            "description": "Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.",
            "datatype": {
              "type": "Number"
            }
          },
          {
            "name": "alignment",
            "shortdesc": {
              "i": "alignChildren"
            },
            "description": {
              "li": [
                {
                  "b": [
                    "top",
                    "bottom",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "left",
                    "right",
                    "fill"
                  ]
                },
                {
                  "b": [
                    "top",
                    "bottom",
                    "left",
                    "right",
                    "fill"
                  ]
                }
              ]
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "properties",
            "shortdesc": "An object that contains one or more creation properties of the control (properties used only when the element is created).",
            "description": {
              "li": [
                {
                  "b": [
                    "borderStyle",
                    "black",
                    "etched",
                    "gray",
                    "raised",
                    "sunken",
                    "etched"
                  ]
                },
                {
                  "b": "su1PanelCoordinates"
                }
              ]
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "enabled",
            "shortdesc": "True if this element is enabled.",
            "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "helpTip",
            "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "indent",
            "shortdesc": "The number of pixels to indent the element during automatic layout.",
            "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
            "datatype": {
              "type": "Number",
              "min": "0"
            }
          },
          {
            "name": "parent",
            "rwaccess": "readonly",
            "shortdesc": "The parent element.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "window",
            "rwaccess": "readonly",
            "shortdesc": "The window that this element belongs to.",
            "datatype": {
              "type": {
                "href": "#/Window",
                "$t": "Window"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The element type; \"panel\".",
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "show",
            "shortdesc": "Shows this element.",
            "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
          },
          {
            "name": "hide",
            "shortdesc": "Hides this element."
          },
          {
            "name": "add",
            "shortdesc": "Adds a child element to this container.",
            "description": "Creates and returns a new control or container object and adds it to the children of this group.",
            "parameters": {
              "parameter": [
                {
                  "name": "type",
                  "shortdesc": {
                    "i": "type"
                  },
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "bounds",
                  "optional": "true",
                  "shortdesc": "A bounds specification that describes the size and position of the new control or container, relative to its parent.",
                  "description": {
                    "a": {
                      "href": "#/Bounds",
                      "$t": "Bounds"
                    },
                    "b": "bounds"
                  },
                  "datatype": {
                    "type": {
                      "href": "#/Bounds",
                      "$t": "Bounds"
                    }
                  }
                },
                {
                  "name": "text",
                  "optional": "true",
                  "shortdesc": "The text or label, a localizable string.",
                  "description": {
                    "b": "text"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "properties",
                  "optional": "true",
                  "shortdesc": "An object that contains one or more creation properties of the new child (properties used only when the element is created).",
                  "description": {
                    "br": "properties"
                  },
                  "datatype": {
                    "type": "Object"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "remove",
            "shortdesc": {
              "a": {
                "href": "#/Panel/children",
                "$t": "children"
              }
            },
            "description": "No error results if the child does not exist.",
            "parameters": {
              "parameter": {
                "name": "what",
                "shortdesc": {
                  "b": "text"
                },
                "datatype": {
                  "type": "Any"
                }
              }
            }
          },
          {
            "name": "addEventListener",
            "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "description": {
                    "i": "JavaScript Tools Guide"
                  },
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "description": {
                    "a": {
                      "href": "#/UIEvent",
                      "$t": "UIEvent"
                    }
                  },
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                  "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "removeEventListener",
            "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
            "description": "All arguments must be identical to those that were used to register the event handler.",
            "parameters": {
              "parameter": [
                {
                  "name": "eventName",
                  "shortdesc": "The name of the event.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "handler",
                  "shortdesc": "The function that handles the event.",
                  "datatype": {
                    "type": {
                      "href": "$COMMON/javascript.xml#/Function",
                      "$t": "Function"
                    }
                  }
                },
                {
                  "name": "capturePhase",
                  "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            },
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "dispatchEvent",
            "shortdesc": "Simulates the occurrence of an event in this target.",
            "description": {
              "a": {
                "href": "#/UIEvent",
                "$t": "UIEvent"
              }
            },
            "datatype": {
              "type": {
                "href": "#/Event",
                "$t": "Event"
              }
            }
          }
        ]
      },
      {
        "type": "event",
        "method": {
          "name": "onDraw",
          "shortdesc": "An event-handler callback function, called when the panel is about to be drawn.",
          "description": {
            "a": [
              {
                "href": "#/ScriptUIGraphics",
                "$t": "ScriptUIGraphics"
              },
              {
                "href": "#/DrawState",
                "$t": "DrawState"
              }
            ]
          }
        }
      }
    ]
  },
  {
    "name": "Point",
    "dynamic": "true",
    "shortdesc": "Defines the location of a window or UI element. Contains a 2-element array.",
    "description": {
      "b": "location"
    },
    "elements": {
      "type": "instance",
      "property": [
        {
          "name": "x",
          "shortdesc": "The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "y",
          "shortdesc": "The vertical coordinate, a pixel offset from the origin of the element's coordinate space.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "left",
          "shortdesc": "The left coordinate.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "top",
          "shortdesc": "The top coordinate.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "length",
          "rwaccess": "readonly",
          "shortdesc": "The array length.",
          "datatype": {
            "type": "Number",
            "value": "2"
          }
        }
      ]
    }
  },
  {
    "name": "Dimension",
    "dynamic": "true",
    "shortdesc": "Defines the size of a window or UI element. Contains a 2-element array.",
    "description": {
      "b": "size"
    },
    "elements": {
      "type": "instance",
      "property": [
        {
          "name": "width",
          "shortdesc": "The width in pixels.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "height",
          "shortdesc": "The height in pixels.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "length",
          "rwaccess": "readonly",
          "shortdesc": "The array length.",
          "datatype": {
            "type": "Number",
            "value": "2"
          }
        }
      ]
    }
  },
  {
    "name": "Bounds",
    "dynamic": "true",
    "shortdesc": "Defines the boundaries of a window within the screen’s coordinate space, or of a UI element within the container’s coordinate space.",
    "description": {
      "b": "bounds"
    },
    "elements": {
      "type": "instance",
      "property": [
        {
          "name": "x",
          "shortdesc": "The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "y",
          "shortdesc": "The vertical coordinate, a pixel offset from the origin of the element's coordinate space.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "width",
          "shortdesc": "The width in pixels.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "height",
          "shortdesc": "The height in pixels.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "left",
          "shortdesc": "The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "right",
          "shortdesc": "The width in pixels.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "top",
          "shortdesc": "The height in pixels.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "bottom",
          "shortdesc": "The vertical coordinate, a pixel offset from the origin of the element's coordinate space.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "length",
          "rwaccess": "readonly",
          "shortdesc": "The array length.",
          "datatype": {
            "type": "Number",
            "value": "4"
          }
        }
      ]
    }
  },
  {
    "name": "UIEvent",
    "dynamic": "true",
    "shortdesc": "Encapsulates input event information for an event that propagates through a container and control hierarchy.",
    "description": {
      "i": [
        "windowObj",
        "controlObj"
      ],
      "a": {
        "href": "#/Window/addEventListener",
        "$t": "addEventListener()"
      }
    },
    "elements": [
      {
        "type": "constructor",
        "method": {
          "name": "UIEvent",
          "shortdesc": "Creates an event.",
          "description": {
            "a": {
              "href": "#/UIEvent",
              "$t": "UIEvent"
            }
          },
          "parameters": {
            "parameter": [
              {
                "name": "type",
                "shortdesc": {
                  "a": {
                    "href": "#/UIEvent/type",
                    "$t": "UIEvent.type"
                  }
                },
                "datatype": {
                  "type": "String"
                }
              },
              {
                "name": "captures",
                "shortdesc": "Set to true if this event can be captured.",
                "datatype": {
                  "type": "Boolean",
                  "value": "false"
                }
              },
              {
                "name": "bubbles",
                "shortdesc": "Set to true if the event bubbles.",
                "datatype": {
                  "type": "Boolean",
                  "value": "false"
                }
              },
              {
                "name": "view",
                "optional": "true",
                "shortdesc": "The ScriptUI element that this event relates to.",
                "datatype": {
                  "type": "Object"
                }
              },
              {
                "name": "detail",
                "optional": "true",
                "shortdesc": "The click count for a mouse-click event.",
                "datatype": {
                  "type": "Number"
                }
              }
            ]
          },
          "datatype": {
            "type": {
              "href": "#/UIEvent",
              "$t": "UIEvent"
            }
          }
        }
      },
      {
        "type": "instance",
        "property": [
          {
            "name": "captures",
            "rwaccess": "readonly",
            "shortdesc": "True if this event can be captured.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bubbles",
            "rwaccess": "readonly",
            "shortdesc": "True if the event is of a type that bubbles.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "cancelable",
            "rwaccess": "readonly",
            "shortdesc": "True if the default action associated with the event can be canceled with preventDefault().",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "currentTarget",
            "rwaccess": "readonly",
            "shortdesc": "The event target object which is currently handling the event. During capturing and bubbling, this is different from the property target.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "eventPhase",
            "rwaccess": "readonly",
            "shortdesc": "The current phase of event propagation; one of none, target, capture, bubble.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "target",
            "rwaccess": "readonly",
            "shortdesc": "The event target object for this event.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "timeStamp",
            "rwaccess": "readonly",
            "shortdesc": "The date and time at which the event occurred.",
            "datatype": {
              "type": {
                "href": "$COMMON/javascript.xml#/Date",
                "$t": "Date"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The name of the event that this  object represents.",
            "description": {
              "i": "JavaScript Tools Guide"
            },
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "view",
            "rwaccess": "readonly",
            "shortdesc": "The ScriptUI element that this event relates to.",
            "datatype": {
              "type": "Any"
            }
          },
          {
            "name": "detail",
            "rwaccess": "readonly",
            "shortdesc": "The click count for a mouse-click event.",
            "datatype": {
              "type": "Any"
            }
          }
        ],
        "method": [
          {
            "name": "preventDefault",
            "shortdesc": "Prevents the default action associated with this event from being called."
          },
          {
            "name": "stopPropagation",
            "shortdesc": "Stops the propagation of this event."
          },
          {
            "name": "initEvent",
            "shortdesc": "Initializes a UI event as a core W3C event.",
            "parameters": {
              "parameter": [
                {
                  "name": "type",
                  "shortdesc": "The event type.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "captures",
                  "shortdesc": "Set to true if this event can be captured.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                },
                {
                  "name": "bubbles",
                  "shortdesc": "Set to true if the event bubbles.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                },
                {
                  "name": "cancelable",
                  "shortdesc": "Set to true if the default action is cancelable.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                }
              ]
            }
          },
          {
            "name": "initUIEvent",
            "shortdesc": "Initializes an event.",
            "parameters": {
              "parameter": [
                {
                  "name": "type",
                  "shortdesc": "The event type.",
                  "datatype": {
                    "type": "String"
                  }
                },
                {
                  "name": "captures",
                  "shortdesc": "Set to true if this event can be captured.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                },
                {
                  "name": "bubbles",
                  "shortdesc": "Set to true if the event bubbles.",
                  "datatype": {
                    "type": "Boolean",
                    "value": "false"
                  }
                },
                {
                  "name": "view",
                  "optional": "true",
                  "shortdesc": "The ScriptUI element that this event relates to.",
                  "datatype": {
                    "type": "Object"
                  }
                },
                {
                  "name": "detail",
                  "optional": "true",
                  "shortdesc": "The click count for a mouse-click event.",
                  "datatype": {
                    "type": "Number"
                  }
                }
              ]
            }
          }
        ]
      }
    ]
  },
  {
    "name": "Event",
    "dynamic": "true",
    "shortdesc": {
      "a": {
        "href": "#/UIEvent",
        "$t": "UIEvent"
      }
    },
    "description": "Encapsulates input event information for an event that propagates through a container and control hierarchy.  Implements W3C standard event handling.",
    "elements": [
      {
        "type": "class",
        "property": [
          {
            "name": "NOT_DISPATCHING",
            "rwaccess": "readonly",
            "datatype": {
              "type": "any"
            }
          },
          {
            "name": "CAPTURING_PHASE",
            "rwaccess": "readonly",
            "datatype": {
              "type": "any"
            }
          },
          {
            "name": "AT_TARGET",
            "rwaccess": "readonly",
            "datatype": {
              "type": "any"
            }
          },
          {
            "name": "BUBBLING_PHASE",
            "rwaccess": "readonly",
            "datatype": {
              "type": "any"
            }
          }
        ]
      },
      {
        "type": "instance",
        "property": [
          {
            "name": "captures",
            "rwaccess": "readonly",
            "shortdesc": "True if this event can be captured.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "bubbles",
            "rwaccess": "readonly",
            "shortdesc": "True if the event is of a type that bubbles.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "cancelable",
            "rwaccess": "readonly",
            "shortdesc": "True if the default action associated with the event can be canceled with preventDefault().",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "currentTarget",
            "rwaccess": "readonly",
            "shortdesc": "The event target object which is currently handling the event. During capturing and bubbling, this is different from the property target.",
            "datatype": {
              "type": "Boolean"
            }
          },
          {
            "name": "eventPhase",
            "rwaccess": "readonly",
            "shortdesc": "The current phase of event propagation; one of none, target, capture, bubble.",
            "datatype": {
              "type": "String"
            }
          },
          {
            "name": "target",
            "rwaccess": "readonly",
            "shortdesc": "The event target object for this event.",
            "datatype": {
              "type": "Object"
            }
          },
          {
            "name": "timeStamp",
            "rwaccess": "readonly",
            "shortdesc": "The date and time at which the event occurred.",
            "datatype": {
              "type": {
                "href": "$COMMON/javascript.xml#/Date",
                "$t": "Date"
              }
            }
          },
          {
            "name": "type",
            "rwaccess": "readonly",
            "shortdesc": "The name of the event that this object represents.",
            "description": {
              "i": "JavaScript Tools Guide"
            },
            "datatype": {
              "type": "String"
            }
          }
        ],
        "method": [
          {
            "name": "preventDefault",
            "shortdesc": "Prevents the default action associated with this event from being called."
          },
          {
            "name": "stopPropagation",
            "shortdesc": "Stops the propagation of this event."
          }
        ]
      }
    ]
  },
  {
    "name": "Environment",
    "dynamic": "false",
    "shortdesc": "Defines attributes of the ScriptUI environment.",
    "description": {
      "a": {
        "href": "#/ScriptUI/class/environment",
        "$t": "ScriptUI.environment"
      }
    },
    "elements": {
      "type": "instance",
      "property": {
        "name": "keyboardState",
        "rwaccess": "readonly",
        "shortdesc": "An object that reports the active state of the keyboard at any time.",
        "description": "Provides access to the key state independent of the event-handling framework.",
        "datatype": {
          "type": {
            "href": "#/KeyboardState",
            "$t": "KeyboardState"
          }
        }
      }
    }
  },
  {
    "name": "Events",
    "dynamic": "false",
    "shortdesc": "Provides access to objects used in the ScriptUI event system.",
    "description": {
      "a": {
        "href": "#/ScriptUI/class/events",
        "$t": "ScriptUI.events"
      }
    },
    "elements": {
      "type": "instance",
      "method": {
        "name": "createEvent",
        "shortdesc": {
          "a": {
            "href": "#/Event",
            "$t": "Event"
          }
        },
        "description": {
          "a": [
            {
              "href": "#/Event",
              "$t": "Event"
            },
            {
              "href": "#/UIEvent",
              "$t": "UIEvent"
            },
            {
              "href": "#/KeyboardEvent",
              "$t": "KeyboardEvent"
            },
            {
              "href": "#/MouseEvent",
              "$t": "MouseEvent"
            }
          ]
        },
        "parameters": {
          "parameter": {
            "name": "eventType",
            "shortdesc": "The name of an event type: one of \"UIEvent\", \"KeyboardEvent\", or \"MouseEvent\".",
            "datatype": {
              "type": "String"
            }
          }
        },
        "datatype": {
          "type": {
            "href": "#/Event",
            "$t": "Event"
          }
        }
      }
    }
  },
  {
    "name": "KeyboardState",
    "dynamic": "false",
    "shortdesc": "Reports the active state of the keyboard.",
    "description": {
      "a": {
        "href": "#/Environment/keyboardState",
        "$t": "ScriptUI.environment.keyboardState"
      }
    },
    "elements": {
      "type": "instance",
      "property": [
        {
          "name": "keyName",
          "rwaccess": "readonly",
          "shortdesc": "A string containing the name of the currently pressed key, such as \"a\", or an empty string.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "shiftKey",
          "rwaccess": "readonly",
          "shortdesc": "True if the Shift key is pressed.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "ctrlKey",
          "rwaccess": "readonly",
          "shortdesc": "True if the Ctrl key is pressed.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "altKey",
          "rwaccess": "readonly",
          "shortdesc": "True if the Alt or Option key is pressed.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "metaKey",
          "rwaccess": "readonly",
          "shortdesc": "True if the Cmd key (in Mac OS) or Windows key (in Windows) is pressed.",
          "datatype": {
            "type": "Boolean"
          }
        }
      ]
    }
  }
]